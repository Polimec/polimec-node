// Polimec Blockchain – https://www.polimec.org/
// Copyright (C) Polimec 2022. All rights reserved.

// The Polimec Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The Polimec Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@polimec.org


//! Autogenerated weights for `pallet_funding`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-04-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Juans-MBP.home`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("politest-local")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/polimec-node
// benchmark
// pallet
// --chain=politest-local
// --pallet=pallet-funding
// --extrinsic=contribution_ends_round
// --output
// test_weight.rs
// --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_funding`.
pub trait WeightInfo {
	fn contribution_ends_round(x: u32, y: u32, ) -> Weight;
}

/// Weights for `pallet_funding` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:1 w:0)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(441), added: 2916, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Contributions` (r:16 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(194), added: 2669, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ContributionBoughtUSD` (r:1 w:1)
	/// Proof: `Funding::ContributionBoughtUSD` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Funding::RetailParticipations` (r:1 w:1)
	/// Proof: `Funding::RetailParticipations` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextContributionId` (r:1 w:1)
	/// Proof: `Funding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(196), added: 2671, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 15]`.
	/// The range of component `y` is `[1, 99]`.
	fn contribution_ends_round(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3093 + x * (134 ±0) + y * (28 ±0)`
		//  Estimated: `6208 + x * (2669 ±0) + y * (2501 ±0)`
		// Minimum execution time: 269_000_000 picoseconds.
		Weight::from_parts(243_223_951, 6208)
			// Standard Error: 103_493
			.saturating_add(Weight::from_parts(3_497_884, 0).saturating_mul(x.into()))
			// Standard Error: 16_476
			.saturating_add(Weight::from_parts(1_907_293, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(10_u64))
			.saturating_add(Weight::from_parts(0, 2669).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(y.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:1 w:0)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(441), added: 2916, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Contributions` (r:16 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(194), added: 2669, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ContributionBoughtUSD` (r:1 w:1)
	/// Proof: `Funding::ContributionBoughtUSD` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Funding::RetailParticipations` (r:1 w:1)
	/// Proof: `Funding::RetailParticipations` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextContributionId` (r:1 w:1)
	/// Proof: `Funding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(196), added: 2671, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 15]`.
	/// The range of component `y` is `[1, 99]`.
	fn contribution_ends_round(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3093 + x * (134 ±0) + y * (28 ±0)`
		//  Estimated: `6208 + x * (2669 ±0) + y * (2501 ±0)`
		// Minimum execution time: 269_000_000 picoseconds.
		Weight::from_parts(243_223_951, 6208)
			// Standard Error: 103_493
			.saturating_add(Weight::from_parts(3_497_884, 0).saturating_mul(x.into()))
			// Standard Error: 16_476
			.saturating_add(Weight::from_parts(1_907_293, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
			.saturating_add(Weight::from_parts(0, 2669).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(y.into()))
	}
}