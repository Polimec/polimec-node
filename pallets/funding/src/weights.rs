// Polimec Blockchain â€“ https://www.polimec.org/
// Copyright (C) Polimec 2022. All rights reserved.

// The Polimec Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The Polimec Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@polimec.org


//! Autogenerated weights for pallet_funding
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Juans-MacBook-Pro.fritz.box`, CPU: `<UNKNOWN>`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("polimec-rococo-local")`, DB CACHE: `1024`

// Executed Command:
// target/release/polimec-parachain-node
// benchmark
// pallet
// --chain=polimec-rococo-local
// --steps=50
// --repeat=20
// --pallet=pallet_funding
// --extrinsic
// *
// --execution=wasm
// --heap-pages=4096
// --output=pallets/funding/src/weights-test.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use sp_arithmetic::traits::Zero;
use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_funding.
pub trait WeightInfo {
	fn create() -> Weight;
	fn edit_metadata() -> Weight;
	fn start_evaluation(x: u32) -> Weight;
	fn start_auction_manually(x: u32, y: u32) -> Weight;
	fn start_auction_automatically() -> Weight;
	fn first_evaluation() -> Weight;
	fn second_to_limit_evaluation(x: u32) -> Weight;
	fn evaluation_over_limit() -> Weight;
	fn bid() -> Weight;

	fn first_contribution_with_ct_deposit() -> Weight;
	fn first_contribution_no_ct_deposit() -> Weight;

	fn first_contribution_ends_round_with_ct_deposit(y: u32, z: u32, ) -> Weight;
	fn first_contribution_ends_round_no_ct_deposit(y: u32, z: u32, ) -> Weight;
	fn second_to_limit_contribution(x: u32, ) -> Weight;
	fn second_to_limit_contribution_ends_round(x: u32, y: u32, z: u32, ) -> Weight;
	fn contribution_over_limit() -> Weight;


		fn evaluation_unbond_for() -> Weight;
	fn evaluation_slash_for() -> Weight;
	fn evaluation_reward_payout_for() -> Weight;
	fn bid_ct_mint_for() -> Weight;
	fn contribution_ct_mint_for() -> Weight;
	fn start_bid_vesting_schedule_for() -> Weight;
	fn start_contribution_vesting_schedule_for() -> Weight;
	fn payout_bid_funds_for() -> Weight;
	fn payout_contribution_funds_for() -> Weight;
	fn decide_project_outcome() -> Weight;
	fn release_bid_funds_for() -> Weight;
	fn bid_unbond_for() -> Weight;
	fn release_contribution_funds_for() -> Weight;
	fn contribution_unbond_for() -> Weight;
}

/// Weights for pallet_funding using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: PolimecFunding NextProjectId (r:1 w:1)
	/// Proof Skipped: PolimecFunding NextProjectId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: PolimecFunding Images (r:1 w:1)
	/// Proof Skipped: PolimecFunding Images (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding ProjectsMetadata (r:0 w:1)
	/// Proof Skipped: PolimecFunding ProjectsMetadata (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding ProjectsDetails (r:0 w:1)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3471`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 3471)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: PolimecFunding ProjectsMetadata (r:1 w:1)
	/// Proof Skipped: PolimecFunding ProjectsMetadata (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Images (r:1 w:0)
	/// Proof Skipped: PolimecFunding Images (max_values: None, max_size: None, mode: Measured)
	fn edit_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `536`
		//  Estimated: `4001`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_000_000, 4001)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: PolimecFunding ProjectsMetadata (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsMetadata (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:1)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding ProjectsToUpdate (r:1 w:1)
	/// Proof Skipped: PolimecFunding ProjectsToUpdate (max_values: None, max_size: None, mode: Measured)
	fn start_evaluation(x: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `467`
		//  Estimated: `3932`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 3932)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn start_auction_manually(x: u32, y: u32) -> Weight {
		Zero::zero()
	}

	fn start_auction_automatically() -> Weight {
		Zero::zero()
	}

	fn first_evaluation() -> Weight {
		Weight::from_parts(20_000_000, 3932)	}

	fn second_to_limit_evaluation(x: u32) -> Weight {
		Weight::from_parts(20_000_000, 3932)	}

	fn evaluation_over_limit() -> Weight {
		Weight::from_parts(20_000_000, 3932)	}

	/// Storage: PolimecFunding ProjectsMetadata (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsMetadata (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding NextBidId (r:1 w:1)
	/// Proof Skipped: PolimecFunding NextBidId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: PolimecFunding Bids (r:1 w:1)
	/// Proof Skipped: PolimecFunding Bids (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Evaluations (r:1 w:0)
	/// Proof Skipped: PolimecFunding Evaluations (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: StatemintAssets Asset (r:1 w:1)
	/// Proof: StatemintAssets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: StatemintAssets Account (r:2 w:2)
	/// Proof: StatemintAssets Account (max_values: None, max_size: Some(134), added: 2609, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1555`
		//  Estimated: `6208`
		// Minimum execution time: 130_000_000 picoseconds.
		Weight::from_parts(140_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}

	fn first_contribution_no_ct_deposit() -> Weight {
				Weight::from_parts(140_000_000, 6208)

	}

	fn first_contribution_with_ct_deposit() -> Weight {
		Weight::from_parts(140_000_000, 6208)

	}

	fn first_contribution_ends_round_no_ct_deposit(y: u32, z: u32) -> Weight {
				Weight::from_parts(140_000_000, 6208)

	}
	fn first_contribution_ends_round_with_ct_deposit(y: u32, z: u32) -> Weight {
		Weight::from_parts(140_000_000, 6208)

	}

	fn second_to_limit_contribution(x: u32) -> Weight {
				Weight::from_parts(140_000_000, 6208)

	}

	fn second_to_limit_contribution_ends_round(x: u32, y: u32, z: u32) -> Weight {
				Weight::from_parts(140_000_000, 6208)

	}

	fn contribution_over_limit() -> Weight {
				Weight::from_parts(140_000_000, 6208)

	}

	/// Storage: PolimecFunding ProjectsMetadata (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsMetadata (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:1)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding NextContributionId (r:1 w:1)
	/// Proof Skipped: PolimecFunding NextContributionId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: PolimecFunding Contributions (r:1 w:1)
	/// Proof Skipped: PolimecFunding Contributions (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Evaluations (r:1 w:0)
	/// Proof Skipped: PolimecFunding Evaluations (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: StatemintAssets Asset (r:1 w:1)
	/// Proof: StatemintAssets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: StatemintAssets Account (r:2 w:2)
	/// Proof: StatemintAssets Account (max_values: None, max_size: Some(134), added: 2609, mode: MaxEncodedLen)

	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Evaluations (r:1 w:1)
	/// Proof Skipped: PolimecFunding Evaluations (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	fn evaluation_unbond_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1303`
		//  Estimated: `4768`
		// Minimum execution time: 60_000_000 picoseconds.
		Weight::from_parts(65_000_000, 4768)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Evaluations (r:2 w:1)
	/// Proof Skipped: PolimecFunding Evaluations (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn evaluation_slash_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1338`
		//  Estimated: `7278`
		// Minimum execution time: 84_000_000 picoseconds.
		Weight::from_parts(94_000_000, 7278)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Evaluations (r:1 w:1)
	/// Proof Skipped: PolimecFunding Evaluations (max_values: None, max_size: None, mode: Measured)
	/// Storage: LocalAssets Asset (r:1 w:1)
	/// Proof: LocalAssets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: LocalAssets Account (r:1 w:1)
	/// Proof: LocalAssets Account (max_values: None, max_size: Some(134), added: 2609, mode: MaxEncodedLen)
	fn evaluation_reward_payout_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1245`
		//  Estimated: `4710`
		// Minimum execution time: 63_000_000 picoseconds.
		Weight::from_parts(71_000_000, 4710)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: PolimecFunding Bids (r:1 w:1)
	/// Proof Skipped: PolimecFunding Bids (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: LocalAssets Asset (r:1 w:1)
	/// Proof: LocalAssets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: LocalAssets Account (r:1 w:1)
	/// Proof: LocalAssets Account (max_values: None, max_size: Some(134), added: 2609, mode: MaxEncodedLen)
	fn bid_ct_mint_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1215`
		//  Estimated: `4680`
		// Minimum execution time: 65_000_000 picoseconds.
		Weight::from_parts(71_000_000, 4680)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: PolimecFunding Contributions (r:1 w:1)
	/// Proof Skipped: PolimecFunding Contributions (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: LocalAssets Asset (r:1 w:1)
	/// Proof: LocalAssets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: LocalAssets Account (r:1 w:1)
	/// Proof: LocalAssets Account (max_values: None, max_size: Some(134), added: 2609, mode: MaxEncodedLen)
	fn contribution_ct_mint_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1205`
		//  Estimated: `4670`
		// Minimum execution time: 64_000_000 picoseconds.
		Weight::from_parts(69_000_000, 4670)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Bids (r:1 w:1)
	/// Proof Skipped: PolimecFunding Bids (max_values: None, max_size: None, mode: Measured)
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	fn start_bid_vesting_schedule_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `870`
		//  Estimated: `4335`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(47_000_000, 4335)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Contributions (r:1 w:1)
	/// Proof Skipped: PolimecFunding Contributions (max_values: None, max_size: None, mode: Measured)
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	fn start_contribution_vesting_schedule_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `898`
		//  Estimated: `4363`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(50_000_000, 4363)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Bids (r:1 w:1)
	/// Proof Skipped: PolimecFunding Bids (max_values: None, max_size: None, mode: Measured)
	/// Storage: StatemintAssets Asset (r:1 w:1)
	/// Proof: StatemintAssets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: StatemintAssets Account (r:2 w:2)
	/// Proof: StatemintAssets Account (max_values: None, max_size: Some(134), added: 2609, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn payout_bid_funds_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1392`
		//  Estimated: `6208`
		// Minimum execution time: 81_000_000 picoseconds.
		Weight::from_parts(89_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Contributions (r:1 w:1)
	/// Proof Skipped: PolimecFunding Contributions (max_values: None, max_size: None, mode: Measured)
	/// Storage: StatemintAssets Asset (r:1 w:1)
	/// Proof: StatemintAssets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: StatemintAssets Account (r:2 w:2)
	/// Proof: StatemintAssets Account (max_values: None, max_size: Some(134), added: 2609, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn payout_contribution_funds_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1420`
		//  Estimated: `6208`
		// Minimum execution time: 81_000_000 picoseconds.
		Weight::from_parts(89_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding ProjectsToUpdate (r:3 w:2)
	/// Proof Skipped: PolimecFunding ProjectsToUpdate (max_values: None, max_size: None, mode: Measured)
	fn decide_project_outcome() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515`
		//  Estimated: `8930`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(31_000_000, 8930)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Bids (r:1 w:1)
	/// Proof Skipped: PolimecFunding Bids (max_values: None, max_size: None, mode: Measured)
	/// Storage: StatemintAssets Asset (r:1 w:1)
	/// Proof: StatemintAssets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: StatemintAssets Account (r:2 w:2)
	/// Proof: StatemintAssets Account (max_values: None, max_size: Some(134), added: 2609, mode: MaxEncodedLen)
	fn release_bid_funds_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1461`
		//  Estimated: `6208`
		// Minimum execution time: 84_000_000 picoseconds.
		Weight::from_parts(91_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Bids (r:1 w:1)
	/// Proof Skipped: PolimecFunding Bids (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	fn bid_unbond_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1406`
		//  Estimated: `4871`
		// Minimum execution time: 61_000_000 picoseconds.
		Weight::from_parts(68_000_000, 4871)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Contributions (r:1 w:1)
	/// Proof Skipped: PolimecFunding Contributions (max_values: None, max_size: None, mode: Measured)
	/// Storage: StatemintAssets Asset (r:1 w:1)
	/// Proof: StatemintAssets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: StatemintAssets Account (r:2 w:2)
	/// Proof: StatemintAssets Account (max_values: None, max_size: Some(134), added: 2609, mode: MaxEncodedLen)
	fn release_contribution_funds_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1453`
		//  Estimated: `6208`
		// Minimum execution time: 83_000_000 picoseconds.
		Weight::from_parts(89_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: PolimecFunding ProjectsDetails (r:1 w:0)
	/// Proof Skipped: PolimecFunding ProjectsDetails (max_values: None, max_size: None, mode: Measured)
	/// Storage: PolimecFunding Contributions (r:1 w:1)
	/// Proof Skipped: PolimecFunding Contributions (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	fn contribution_unbond_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1397`
		//  Estimated: `4862`
		// Minimum execution time: 60_000_000 picoseconds.
		Weight::from_parts(66_000_000, 4862)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}


}