// Polimec Blockchain â€“ https://www.polimec.org/
// Copyright (C) Polimec 2022. All rights reserved.

// The Polimec Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The Polimec Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@polimec.org


//! Autogenerated weights for `pallet_funding`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Juans-MBP.home`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("polimec-rococo-local")`, DB CACHE: `1024`

// Executed Command:
// target/release/polimec-parachain-node
// benchmark
// pallet
// --chain=polimec-rococo-local
// --steps=50
// --repeat=20
// --pallet=pallet_funding
// --extrinsic
// *
// --heap-pages=4096
// --output=pallets/funding/src/weights-test.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_funding`.
pub trait WeightInfo {
	fn create() -> Weight;
	fn edit_metadata() -> Weight;
	fn start_evaluation(x: u32, ) -> Weight;
	fn start_auction_manually(x: u32, y: u32, ) -> Weight;
	fn start_auction_automatically(x: u32, ) -> Weight;
	fn first_evaluation() -> Weight;
	fn second_to_limit_evaluation(x: u32, ) -> Weight;
	fn evaluation_over_limit() -> Weight;
	fn bid_with_ct_deposit(y: u32, ) -> Weight;
	fn bid_no_ct_deposit(x: u32, y: u32, ) -> Weight;
	fn first_contribution_with_ct_deposit() -> Weight;
	fn first_contribution_no_ct_deposit() -> Weight;
	fn first_contribution_ends_round_with_ct_deposit(y: u32, z: u32, ) -> Weight;
	fn first_contribution_ends_round_no_ct_deposit(y: u32, z: u32, ) -> Weight;
	fn second_to_limit_contribution(x: u32, ) -> Weight;
	fn second_to_limit_contribution_ends_round(x: u32, y: u32, z: u32, ) -> Weight;
	fn contribution_over_limit() -> Weight;
	fn evaluation_unbond_for() -> Weight;
	fn evaluation_reward_payout_for_with_ct_account_creation() -> Weight;
	fn evaluation_reward_payout_for_no_ct_account_creation() -> Weight;
	fn evaluation_slash_for() -> Weight;
	fn bid_ct_mint_for_with_ct_account_creation() -> Weight;
	fn bid_ct_mint_for_no_ct_account_creation() -> Weight;
	fn contribution_ct_mint_for_with_ct_account_creation() -> Weight;
	fn contribution_ct_mint_for_no_ct_account_creation() -> Weight;
	fn start_bid_vesting_schedule_for() -> Weight;
	fn start_contribution_vesting_schedule_for() -> Weight;
	fn payout_bid_funds_for() -> Weight;
	fn payout_contribution_funds_for() -> Weight;
	fn decide_project_outcome(x: u32, y: u32, ) -> Weight;
	fn release_bid_funds_for() -> Weight;
	fn release_contribution_funds_for() -> Weight;
	fn bid_unbond_for() -> Weight;
	fn contribution_unbond_for() -> Weight;

	fn end_evaluation_success(x: u32, ) -> Weight;
	fn end_evaluation_failure() -> Weight;
	fn start_candle_phase(x: u32, ) -> Weight;

	fn start_community_funding_success(x: u32, y: u32, z: u32) -> Weight;
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Nonce` (r:1 w:1)
	/// Proof: `PolimecFunding::Nonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:1 w:0)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:1 w:0)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_community_funding_failure(x: u32, ) -> Weight;
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_remainder_funding(x: u32, ) -> Weight;
	fn end_funding_success() -> Weight;
	fn end_funding_failure() -> Weight;
	fn end_funding_awaiting_decision() -> Weight;
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Metadata` (r:1 w:0)
	/// Proof: `LocalAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn start_settlement_funding_success() -> Weight;
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	fn start_settlement_funding_failure() -> Weight;
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	fn project_decision_accept_funding() -> Weight;
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	fn project_decision_reject_funding() -> Weight;
}

/// Weights for `pallet_funding` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `PolimecFunding::NextProjectId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextProjectId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Images` (r:1 w:1)
	/// Proof: `PolimecFunding::Images` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:0 w:1)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:0 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `3593`
		// Minimum execution time: 60_000_000 picoseconds.
		Weight::from_parts(62_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Images` (r:1 w:0)
	/// Proof: `PolimecFunding::Images` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn edit_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `609`
		//  Estimated: `3814`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3814)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_evaluation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563 + x * (529 Â±0)`
		//  Estimated: `4087 + x * (3097 Â±0)`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(19_253_978, 4087)
			// Standard Error: 15_066
			.saturating_add(Weight::from_parts(2_633_080, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:4558 w:2)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 10000]`.
	fn start_auction_manually(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (1281 Â±0) + y * (21 Â±0)`
		//  Estimated: `268395 + x * (9966 Â±8_383) + y * (1212 Â±82)`
		// Minimum execution time: 397_000_000 picoseconds.
		Weight::from_parts(420_000_000, 268395)
			// Standard Error: 4_704_303
			.saturating_add(Weight::from_parts(12_350_427, 0).saturating_mul(x.into()))
			// Standard Error: 46_630
			.saturating_add(Weight::from_parts(1_402_043, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(87_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 9966).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 1212).saturating_mul(y.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_auction_automatically(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `411 + x * (529 Â±0)`
		//  Estimated: `4087 + x * (3097 Â±0)`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(20_242_112, 4087)
			// Standard Error: 18_140
			.saturating_add(Weight::from_parts(2_666_357, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextEvaluationId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn first_evaluation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `676`
		//  Estimated: `4614`
		// Minimum execution time: 92_000_000 picoseconds.
		Weight::from_parts(94_000_000, 4614)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextEvaluationId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:256 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 255]`.
	fn second_to_limit_evaluation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `893 + x * (137 Â±0)`
		//  Estimated: `4614 + x * (2820 Â±0)`
		// Minimum execution time: 71_000_000 picoseconds.
		Weight::from_parts(58_910_334, 4614)
			// Standard Error: 11_575
			.saturating_add(Weight::from_parts(3_780_894, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 2820).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextEvaluationId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:257 w:2)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn evaluation_over_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `36120`
		//  Estimated: `725730`
		// Minimum execution time: 1_017_000_000 picoseconds.
		Weight::from_parts(1_051_000_000, 725730)
			.saturating_add(T::DbWeight::get().reads(261_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:1 w:10)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:1 w:1)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextBidId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextBidId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `y` is `[0, 10]`.
	fn bid_with_ct_deposit(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2140`
		//  Estimated: `6208`
		// Minimum execution time: 143_000_000 picoseconds.
		Weight::from_parts(106_855_955, 6208)
			// Standard Error: 319_819
			.saturating_add(Weight::from_parts(70_108_416, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:256 w:10)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:1 w:1)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextBidId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextBidId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 255]`.
	/// The range of component `y` is `[0, 10]`.
	fn bid_no_ct_deposit(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2227 + x * (164 Â±0)`
		//  Estimated: `6208 + x * (2893 Â±0)`
		// Minimum execution time: 760_000_000 picoseconds.
		Weight::from_parts(69_652_890, 6208)
			// Standard Error: 11_684
			.saturating_add(Weight::from_parts(4_020_612, 0).saturating_mul(x.into()))
			// Standard Error: 283_589
			.saturating_add(Weight::from_parts(72_460_034, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2893).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn first_contribution_with_ct_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1996`
		//  Estimated: `6208`
		// Minimum execution time: 147_000_000 picoseconds.
		Weight::from_parts(155_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn first_contribution_no_ct_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2073`
		//  Estimated: `6208`
		// Minimum execution time: 119_000_000 picoseconds.
		Weight::from_parts(126_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:9832 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `y` is `[1, 99]`.
	/// The range of component `z` is `[1, 10000]`.
	fn first_contribution_ends_round_with_ct_deposit(y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + y * (443 Â±0) + z * (37 Â±0)`
		//  Estimated: `78415 + y * (14240 Â±4_378) + z * (1371 Â±43)`
		// Minimum execution time: 264_000_000 picoseconds.
		Weight::from_parts(268_000_000, 78415)
			// Standard Error: 5_143_014
			.saturating_add(Weight::from_parts(16_318_492, 0).saturating_mul(y.into()))
			// Standard Error: 50_979
			.saturating_add(Weight::from_parts(1_601_983, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(36_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 14240).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 1371).saturating_mul(z.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:9832 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `y` is `[1, 99]`.
	/// The range of component `z` is `[1, 10000]`.
	fn first_contribution_ends_round_no_ct_deposit(y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + y * (443 Â±0) + z * (37 Â±0)`
		//  Estimated: `78415 + y * (14240 Â±4_378) + z * (1371 Â±43)`
		// Minimum execution time: 226_000_000 picoseconds.
		Weight::from_parts(239_000_000, 78415)
			// Standard Error: 5_135_841
			.saturating_add(Weight::from_parts(15_722_813, 0).saturating_mul(y.into()))
			// Standard Error: 50_908
			.saturating_add(Weight::from_parts(1_606_667, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(36_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 14240).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 1371).saturating_mul(z.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:256 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 255]`.
	fn second_to_limit_contribution(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2213 + x * (137 Â±0)`
		//  Estimated: `6208 + x * (2839 Â±0)`
		// Minimum execution time: 124_000_000 picoseconds.
		Weight::from_parts(117_868_102, 6208)
			// Standard Error: 10_026
			.saturating_add(Weight::from_parts(3_746_658, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 2839).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:256 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:9832 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 255]`.
	/// The range of component `y` is `[1, 99]`.
	/// The range of component `z` is `[1, 10000]`.
	fn second_to_limit_contribution_ends_round(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `75282 + x * (137 Â±0) + y * (723 Â±0) + z * (39 Â±0)`
		//  Estimated: `17232 + x * (2839 Â±0) + y * (115061 Â±7_565) + z * (2358 Â±74)`
		// Minimum execution time: 1_097_000_000 picoseconds.
		Weight::from_parts(554_228_738, 17232)
			// Standard Error: 8_861_727
			.saturating_add(Weight::from_parts(133_771_367, 0).saturating_mul(y.into()))
			// Standard Error: 86_849
			.saturating_add(Weight::from_parts(2_763_795, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().reads((37_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(z.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 2839).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 115061).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 2358).saturating_mul(z.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:257 w:2)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	fn contribution_over_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37440`
		//  Estimated: `730613`
		// Minimum execution time: 1_103_000_000 picoseconds.
		Weight::from_parts(1_165_000_000, 730613)
			.saturating_add(T::DbWeight::get().reads(267_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn evaluation_unbond_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1411`
		//  Estimated: `4614`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(60_000_000, 4614)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Account` (r:1 w:1)
	/// Proof: `LocalAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn evaluation_reward_payout_for_with_ct_account_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1515`
		//  Estimated: `4614`
		// Minimum execution time: 92_000_000 picoseconds.
		Weight::from_parts(102_000_000, 4614)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Account` (r:1 w:1)
	/// Proof: `LocalAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn evaluation_reward_payout_for_no_ct_account_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1219`
		//  Estimated: `3814`
		// Minimum execution time: 48_000_000 picoseconds.
		Weight::from_parts(49_000_000, 3814)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn evaluation_slash_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1419`
		//  Estimated: `4614`
		// Minimum execution time: 68_000_000 picoseconds.
		Weight::from_parts(71_000_000, 4614)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `PolimecFunding::Bids` (r:1 w:1)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Account` (r:1 w:1)
	/// Proof: `LocalAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn bid_ct_mint_for_with_ct_account_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1629`
		//  Estimated: `4614`
		// Minimum execution time: 96_000_000 picoseconds.
		Weight::from_parts(99_000_000, 4614)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::Bids` (r:1 w:1)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Account` (r:1 w:1)
	/// Proof: `LocalAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn bid_ct_mint_for_no_ct_account_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1180`
		//  Estimated: `3883`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(47_000_000, 3883)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Account` (r:1 w:1)
	/// Proof: `LocalAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn contribution_ct_mint_for_with_ct_account_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1545`
		//  Estimated: `4614`
		// Minimum execution time: 91_000_000 picoseconds.
		Weight::from_parts(98_000_000, 4614)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Account` (r:1 w:1)
	/// Proof: `LocalAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn contribution_ct_mint_for_no_ct_account_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1217`
		//  Estimated: `3829`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(50_000_000, 3829)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:1 w:1)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn start_bid_vesting_schedule_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `818`
		//  Estimated: `4283`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(31_000_000, 4283)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn start_contribution_vesting_schedule_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `847`
		//  Estimated: `4312`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(32_000_000, 4312)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:1 w:1)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn payout_bid_funds_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1372`
		//  Estimated: `6208`
		// Minimum execution time: 64_000_000 picoseconds.
		Weight::from_parts(69_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn payout_contribution_funds_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1401`
		//  Estimated: `6208`
		// Minimum execution time: 69_000_000 picoseconds.
		Weight::from_parts(77_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:2980 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 10000]`.
	fn decide_project_outcome(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10254 + x * (419 Â±0) + y * (20 Â±0)`
		//  Estimated: `35057 + x * (4876 Â±4_177) + y * (1437 Â±41)`
		// Minimum execution time: 64_000_000 picoseconds.
		Weight::from_parts(68_000_000, 35057)
			// Standard Error: 4_809_624
			.saturating_add(Weight::from_parts(5_610_465, 0).saturating_mul(x.into()))
			// Standard Error: 47_674
			.saturating_add(Weight::from_parts(1_647_468, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 4876).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 1437).saturating_mul(y.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:1 w:1)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn release_bid_funds_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1481`
		//  Estimated: `6208`
		// Minimum execution time: 64_000_000 picoseconds.
		Weight::from_parts(71_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn release_contribution_funds_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1474`
		//  Estimated: `6208`
		// Minimum execution time: 64_000_000 picoseconds.
		Weight::from_parts(70_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:1 w:1)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn bid_unbond_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1486`
		//  Estimated: `4614`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(57_000_000, 4614)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn contribution_unbond_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1441`
		//  Estimated: `4614`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(57_000_000, 4614)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:4 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:99 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_evaluation_success(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `680 + x * (529 Â±0)`
		//  Estimated: `12270 + x * (3097 Â±0)`
		// Minimum execution time: 526_000_000 picoseconds.
		Weight::from_parts(542_694_602, 0)
			.saturating_add(Weight::from_parts(0, 12270))
			// Standard Error: 319_361
			.saturating_add(Weight::from_parts(37_635_189, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:4 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	fn end_evaluation_failure() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1148`
		//  Estimated: `12270`
		// Minimum execution time: 478_000_000 picoseconds.
		Weight::from_parts(553_000_000, 0)
			.saturating_add(Weight::from_parts(0, 12270))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(1))
	}

	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_candle_phase(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `445 + x * (529 Â±0)`
		//  Estimated: `4087 + x * (3097 Â±0)`
		// Minimum execution time: 241_000_000 picoseconds.
		Weight::from_parts(229_863_239, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			// Standard Error: 186_038
			.saturating_add(Weight::from_parts(36_067_945, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
	}

	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Nonce` (r:1 w:1)
	/// Proof: `PolimecFunding::Nonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:2049 w:2048)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:1025 w:1025)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1024 w:1024)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1024 w:1024)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:1 w:0)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 1024]`.
	/// The range of component `z` is `[0, 1024]`.
	fn start_community_funding_success(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `91678 + x * (529 Â±0) + y * (167 Â±0) + z * (364 Â±0)`
		//  Estimated: `4087 + x * (3097 Â±0) + y * (2893 Â±0) + z * (3624 Â±0)`
		// Minimum execution time: 139_251_000_000 picoseconds.
		Weight::from_parts(6_810_381_680, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			// Standard Error: 2_917_537
			.saturating_add(Weight::from_parts(143_813_813, 0).saturating_mul(y.into()))
			// Standard Error: 2_914_495
			.saturating_add(Weight::from_parts(1_093_099_600, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(z.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(z.into())))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2893).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 3624).saturating_mul(z.into()))
	}

	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Nonce` (r:1 w:1)
	/// Proof: `PolimecFunding::Nonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:1 w:0)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:1 w:0)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_community_funding_failure(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2654 + x * (4 Â±0)`
		//  Estimated: `4087`
		// Minimum execution time: 1_453_000_000 picoseconds.
		Weight::from_parts(1_487_504_532, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			// Standard Error: 177_339
			.saturating_add(Weight::from_parts(731_091, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(3))
	}

	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_remainder_funding(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510 + x * (529 Â±0)`
		//  Estimated: `4087 + x * (3097 Â±0)`
		// Minimum execution time: 242_000_000 picoseconds.
		Weight::from_parts(227_535_753, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			// Standard Error: 174_777
			.saturating_add(Weight::from_parts(37_767_357, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
	}

	fn end_funding_success() -> Weight {
		Weight::from_parts(227_535_753, 0)
	}

	fn end_funding_failure() -> Weight {
		Weight::from_parts(227_535_753, 0)
	}

	fn end_funding_awaiting_decision() -> Weight {
		Weight::from_parts(227_535_753, 0)
	}


	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Metadata` (r:1 w:0)
	/// Proof: `LocalAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn start_settlement_funding_success() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `933`
		//  Estimated: `3814`
		// Minimum execution time: 447_000_000 picoseconds.
		Weight::from_parts(457_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3814))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	fn start_settlement_funding_failure() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `760`
		//  Estimated: `3814`
		// Minimum execution time: 130_000_000 picoseconds.
		Weight::from_parts(136_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3814))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	fn project_decision_accept_funding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `535`
		//  Estimated: `4087`
		// Minimum execution time: 200_000_000 picoseconds.
		Weight::from_parts(207_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	fn project_decision_reject_funding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `535`
		//  Estimated: `4087`
		// Minimum execution time: 200_000_000 picoseconds.
		Weight::from_parts(203_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `PolimecFunding::NextProjectId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextProjectId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Images` (r:1 w:1)
	/// Proof: `PolimecFunding::Images` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:0 w:1)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:0 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `3593`
		// Minimum execution time: 60_000_000 picoseconds.
		Weight::from_parts(62_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Images` (r:1 w:0)
	/// Proof: `PolimecFunding::Images` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn edit_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `609`
		//  Estimated: `3814`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3814)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_evaluation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563 + x * (529 Â±0)`
		//  Estimated: `4087 + x * (3097 Â±0)`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(19_253_978, 4087)
			// Standard Error: 15_066
			.saturating_add(Weight::from_parts(2_633_080, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:4558 w:2)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 10000]`.
	fn start_auction_manually(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (1281 Â±0) + y * (21 Â±0)`
		//  Estimated: `268395 + x * (9966 Â±8_383) + y * (1212 Â±82)`
		// Minimum execution time: 397_000_000 picoseconds.
		Weight::from_parts(420_000_000, 268395)
			// Standard Error: 4_704_303
			.saturating_add(Weight::from_parts(12_350_427, 0).saturating_mul(x.into()))
			// Standard Error: 46_630
			.saturating_add(Weight::from_parts(1_402_043, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(87_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 9966).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 1212).saturating_mul(y.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_auction_automatically(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `411 + x * (529 Â±0)`
		//  Estimated: `4087 + x * (3097 Â±0)`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(20_242_112, 4087)
			// Standard Error: 18_140
			.saturating_add(Weight::from_parts(2_666_357, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextEvaluationId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn first_evaluation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `676`
		//  Estimated: `4614`
		// Minimum execution time: 92_000_000 picoseconds.
		Weight::from_parts(94_000_000, 4614)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextEvaluationId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:256 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 255]`.
	fn second_to_limit_evaluation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `893 + x * (137 Â±0)`
		//  Estimated: `4614 + x * (2820 Â±0)`
		// Minimum execution time: 71_000_000 picoseconds.
		Weight::from_parts(58_910_334, 4614)
			// Standard Error: 11_575
			.saturating_add(Weight::from_parts(3_780_894, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 2820).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextEvaluationId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:257 w:2)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn evaluation_over_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `36120`
		//  Estimated: `725730`
		// Minimum execution time: 1_017_000_000 picoseconds.
		Weight::from_parts(1_051_000_000, 725730)
			.saturating_add(RocksDbWeight::get().reads(261_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:1 w:10)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:1 w:1)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextBidId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextBidId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `y` is `[0, 10]`.
	fn bid_with_ct_deposit(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2140`
		//  Estimated: `6208`
		// Minimum execution time: 143_000_000 picoseconds.
		Weight::from_parts(106_855_955, 6208)
			// Standard Error: 319_819
			.saturating_add(Weight::from_parts(70_108_416, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(y.into())))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:256 w:10)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:1 w:1)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextBidId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextBidId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 255]`.
	/// The range of component `y` is `[0, 10]`.
	fn bid_no_ct_deposit(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2227 + x * (164 Â±0)`
		//  Estimated: `6208 + x * (2893 Â±0)`
		// Minimum execution time: 760_000_000 picoseconds.
		Weight::from_parts(69_652_890, 6208)
			// Standard Error: 11_684
			.saturating_add(Weight::from_parts(4_020_612, 0).saturating_mul(x.into()))
			// Standard Error: 283_589
			.saturating_add(Weight::from_parts(72_460_034, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2893).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn first_contribution_with_ct_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1996`
		//  Estimated: `6208`
		// Minimum execution time: 147_000_000 picoseconds.
		Weight::from_parts(155_000_000, 6208)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn first_contribution_no_ct_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2073`
		//  Estimated: `6208`
		// Minimum execution time: 119_000_000 picoseconds.
		Weight::from_parts(126_000_000, 6208)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:9832 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `y` is `[1, 99]`.
	/// The range of component `z` is `[1, 10000]`.
	fn first_contribution_ends_round_with_ct_deposit(y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + y * (443 Â±0) + z * (37 Â±0)`
		//  Estimated: `78415 + y * (14240 Â±4_378) + z * (1371 Â±43)`
		// Minimum execution time: 264_000_000 picoseconds.
		Weight::from_parts(268_000_000, 78415)
			// Standard Error: 5_143_014
			.saturating_add(Weight::from_parts(16_318_492, 0).saturating_mul(y.into()))
			// Standard Error: 50_979
			.saturating_add(Weight::from_parts(1_601_983, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(36_u64))
			.saturating_add(RocksDbWeight::get().reads((5_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 14240).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 1371).saturating_mul(z.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:9832 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `y` is `[1, 99]`.
	/// The range of component `z` is `[1, 10000]`.
	fn first_contribution_ends_round_no_ct_deposit(y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + y * (443 Â±0) + z * (37 Â±0)`
		//  Estimated: `78415 + y * (14240 Â±4_378) + z * (1371 Â±43)`
		// Minimum execution time: 226_000_000 picoseconds.
		Weight::from_parts(239_000_000, 78415)
			// Standard Error: 5_135_841
			.saturating_add(Weight::from_parts(15_722_813, 0).saturating_mul(y.into()))
			// Standard Error: 50_908
			.saturating_add(Weight::from_parts(1_606_667, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(36_u64))
			.saturating_add(RocksDbWeight::get().reads((5_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 14240).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 1371).saturating_mul(z.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:256 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 255]`.
	fn second_to_limit_contribution(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2213 + x * (137 Â±0)`
		//  Estimated: `6208 + x * (2839 Â±0)`
		// Minimum execution time: 124_000_000 picoseconds.
		Weight::from_parts(117_868_102, 6208)
			// Standard Error: 10_026
			.saturating_add(Weight::from_parts(3_746_658, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 2839).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:256 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:9832 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 255]`.
	/// The range of component `y` is `[1, 99]`.
	/// The range of component `z` is `[1, 10000]`.
	fn second_to_limit_contribution_ends_round(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `75282 + x * (137 Â±0) + y * (723 Â±0) + z * (39 Â±0)`
		//  Estimated: `17232 + x * (2839 Â±0) + y * (115061 Â±7_565) + z * (2358 Â±74)`
		// Minimum execution time: 1_097_000_000 picoseconds.
		Weight::from_parts(554_228_738, 17232)
			// Standard Error: 8_861_727
			.saturating_add(Weight::from_parts(133_771_367, 0).saturating_mul(y.into()))
			// Standard Error: 86_849
			.saturating_add(Weight::from_parts(2_763_795, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().reads((37_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(z.into())))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 2839).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 115061).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 2358).saturating_mul(z.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:257 w:2)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	fn contribution_over_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37440`
		//  Estimated: `730613`
		// Minimum execution time: 1_103_000_000 picoseconds.
		Weight::from_parts(1_165_000_000, 730613)
			.saturating_add(RocksDbWeight::get().reads(267_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn evaluation_unbond_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1411`
		//  Estimated: `4614`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(60_000_000, 4614)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Account` (r:1 w:1)
	/// Proof: `LocalAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn evaluation_reward_payout_for_with_ct_account_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1515`
		//  Estimated: `4614`
		// Minimum execution time: 92_000_000 picoseconds.
		Weight::from_parts(102_000_000, 4614)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Account` (r:1 w:1)
	/// Proof: `LocalAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn evaluation_reward_payout_for_no_ct_account_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1219`
		//  Estimated: `3814`
		// Minimum execution time: 48_000_000 picoseconds.
		Weight::from_parts(49_000_000, 3814)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn evaluation_slash_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1419`
		//  Estimated: `4614`
		// Minimum execution time: 68_000_000 picoseconds.
		Weight::from_parts(71_000_000, 4614)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `PolimecFunding::Bids` (r:1 w:1)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Account` (r:1 w:1)
	/// Proof: `LocalAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn bid_ct_mint_for_with_ct_account_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1629`
		//  Estimated: `4614`
		// Minimum execution time: 96_000_000 picoseconds.
		Weight::from_parts(99_000_000, 4614)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::Bids` (r:1 w:1)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Account` (r:1 w:1)
	/// Proof: `LocalAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn bid_ct_mint_for_no_ct_account_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1180`
		//  Estimated: `3883`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(47_000_000, 3883)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Account` (r:1 w:1)
	/// Proof: `LocalAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn contribution_ct_mint_for_with_ct_account_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1545`
		//  Estimated: `4614`
		// Minimum execution time: 91_000_000 picoseconds.
		Weight::from_parts(98_000_000, 4614)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Account` (r:1 w:1)
	/// Proof: `LocalAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn contribution_ct_mint_for_no_ct_account_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1217`
		//  Estimated: `3829`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(50_000_000, 3829)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:1 w:1)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn start_bid_vesting_schedule_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `818`
		//  Estimated: `4283`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(31_000_000, 4283)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn start_contribution_vesting_schedule_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `847`
		//  Estimated: `4312`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(32_000_000, 4312)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:1 w:1)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn payout_bid_funds_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1372`
		//  Estimated: `6208`
		// Minimum execution time: 64_000_000 picoseconds.
		Weight::from_parts(69_000_000, 6208)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn payout_contribution_funds_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1401`
		//  Estimated: `6208`
		// Minimum execution time: 69_000_000 picoseconds.
		Weight::from_parts(77_000_000, 6208)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:2980 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 10000]`.
	fn decide_project_outcome(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10254 + x * (419 Â±0) + y * (20 Â±0)`
		//  Estimated: `35057 + x * (4876 Â±4_177) + y * (1437 Â±41)`
		// Minimum execution time: 64_000_000 picoseconds.
		Weight::from_parts(68_000_000, 35057)
			// Standard Error: 4_809_624
			.saturating_add(Weight::from_parts(5_610_465, 0).saturating_mul(x.into()))
			// Standard Error: 47_674
			.saturating_add(Weight::from_parts(1_647_468, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 4876).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 1437).saturating_mul(y.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:1 w:1)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn release_bid_funds_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1481`
		//  Estimated: `6208`
		// Minimum execution time: 64_000_000 picoseconds.
		Weight::from_parts(71_000_000, 6208)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn release_contribution_funds_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1474`
		//  Estimated: `6208`
		// Minimum execution time: 64_000_000 picoseconds.
		Weight::from_parts(70_000_000, 6208)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:1 w:1)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn bid_unbond_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1486`
		//  Estimated: `4614`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(57_000_000, 4614)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn contribution_unbond_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1441`
		//  Estimated: `4614`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(57_000_000, 4614)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}




	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:4 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:99 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_evaluation_success(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `680 + x * (529 Â±0)`
		//  Estimated: `12270 + x * (3097 Â±0)`
		// Minimum execution time: 526_000_000 picoseconds.
		Weight::from_parts(542_694_602, 0)
			.saturating_add(Weight::from_parts(0, 12270))
			// Standard Error: 319_361
			.saturating_add(Weight::from_parts(37_635_189, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:4 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	fn end_evaluation_failure() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1148`
		//  Estimated: `12270`
		// Minimum execution time: 478_000_000 picoseconds.
		Weight::from_parts(553_000_000, 0)
			.saturating_add(Weight::from_parts(0, 12270))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_candle_phase(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `445 + x * (529 Â±0)`
		//  Estimated: `4087 + x * (3097 Â±0)`
		// Minimum execution time: 241_000_000 picoseconds.
		Weight::from_parts(229_863_239, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			// Standard Error: 186_038
			.saturating_add(Weight::from_parts(36_067_945, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
	}

	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Nonce` (r:1 w:1)
	/// Proof: `PolimecFunding::Nonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:2049 w:2048)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:1025 w:1025)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1024 w:1024)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1024 w:1024)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:1 w:0)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 1024]`.
	/// The range of component `z` is `[0, 1024]`.
	fn start_community_funding_success(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `91678 + x * (529 Â±0) + y * (167 Â±0) + z * (364 Â±0)`
		//  Estimated: `4087 + x * (3097 Â±0) + y * (2893 Â±0) + z * (3624 Â±0)`
		// Minimum execution time: 139_251_000_000 picoseconds.
		Weight::from_parts(6_810_381_680, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			// Standard Error: 2_917_537
			.saturating_add(Weight::from_parts(143_813_813, 0).saturating_mul(y.into()))
			// Standard Error: 2_914_495
			.saturating_add(Weight::from_parts(1_093_099_600, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(10))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(z.into())))
			.saturating_add(RocksDbWeight::get().writes(5))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(z.into())))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2893).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 3624).saturating_mul(z.into()))
	}

	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Nonce` (r:1 w:1)
	/// Proof: `PolimecFunding::Nonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:1 w:0)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:1 w:0)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_community_funding_failure(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2654 + x * (4 Â±0)`
		//  Estimated: `4087`
		// Minimum execution time: 1_453_000_000 picoseconds.
		Weight::from_parts(1_487_504_532, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			// Standard Error: 177_339
			.saturating_add(Weight::from_parts(731_091, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_remainder_funding(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510 + x * (529 Â±0)`
		//  Estimated: `4087 + x * (3097 Â±0)`
		// Minimum execution time: 242_000_000 picoseconds.
		Weight::from_parts(227_535_753, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			// Standard Error: 174_777
			.saturating_add(Weight::from_parts(37_767_357, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
	}

	fn end_funding_success() -> Weight {
		Weight::from_parts(227_535_753, 0)
	}

	fn end_funding_failure() -> Weight {
		Weight::from_parts(227_535_753, 0)
	}

	fn end_funding_awaiting_decision() -> Weight {
		Weight::from_parts(227_535_753, 0)
	}


	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Metadata` (r:1 w:0)
	/// Proof: `LocalAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn start_settlement_funding_success() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `933`
		//  Estimated: `3814`
		// Minimum execution time: 447_000_000 picoseconds.
		Weight::from_parts(457_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3814))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	fn start_settlement_funding_failure() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `760`
		//  Estimated: `3814`
		// Minimum execution time: 130_000_000 picoseconds.
		Weight::from_parts(136_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3814))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	fn project_decision_accept_funding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `535`
		//  Estimated: `4087`
		// Minimum execution time: 200_000_000 picoseconds.
		Weight::from_parts(207_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	fn project_decision_reject_funding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `535`
		//  Estimated: `4087`
		// Minimum execution time: 200_000_000 picoseconds.
		Weight::from_parts(203_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
}