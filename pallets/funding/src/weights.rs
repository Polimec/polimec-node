// Polimec Blockchain – https://www.polimec.org/
// Copyright (C) Polimec 2022. All rights reserved.

// The Polimec Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The Polimec Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@polimec.org


//! Autogenerated weights for `pallet_funding`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Juans-MBP.home`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("polimec-rococo-local")`, DB CACHE: `1024`

// Executed Command:
// target/release/polimec-node
// benchmark
// pallet
// --chain=polimec-rococo-local
// --steps=50
// --repeat=20
// --pallet=pallet_funding
// --extrinsic
// *
// --heap-pages=4096
// --output=pallets/funding/src/weights-test.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_funding`.
pub trait WeightInfo {
	fn create() -> Weight;
	fn edit_metadata() -> Weight;
	fn start_evaluation(x: u32, ) -> Weight;
	fn start_auction_manually(x: u32 ) -> Weight;
	fn evaluation_to_limit(x: u32, ) -> Weight;
	fn evaluation_over_limit() -> Weight;
	fn bid(x: u32, y: u32, ) -> Weight;
	fn contribution(x: u32, ) -> Weight;
	fn contribution_ends_round(x: u32, y: u32 ) -> Weight;
	fn decide_project_outcome(x: u32 ) -> Weight;
	fn settle_successful_evaluation() -> Weight;
	fn settle_failed_evaluation() -> Weight;
	fn settle_successful_bid() -> Weight;
	fn settle_failed_bid() -> Weight;
	fn settle_successful_contribution() -> Weight;
	fn settle_failed_contribution() -> Weight;
	fn end_evaluation_success(x: u32, ) -> Weight;
	fn end_evaluation_failure() -> Weight;
	fn start_candle_phase(x: u32, ) -> Weight;
	fn start_community_funding(x: u32, y: u32, z: u32, ) -> Weight;
	fn start_remainder_funding(x: u32, ) -> Weight;
	fn end_funding_automatically_rejected_evaluators_slashed(x: u32, ) -> Weight;
	fn end_funding_awaiting_decision_evaluators_slashed(x: u32, ) -> Weight;
	fn end_funding_awaiting_decision_evaluators_unchanged(x: u32, ) -> Weight;
	fn end_funding_automatically_accepted_evaluators_rewarded(x: u32, y: u32, ) -> Weight;
	fn project_decision() -> Weight;
	fn start_settlement_funding_success() -> Weight;
	fn start_settlement_funding_failure() -> Weight;
}

/// Weights for `pallet_funding` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `PolimecFunding::NextProjectId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextProjectId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Images` (r:1 w:1)
	/// Proof: `PolimecFunding::Images` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:0 w:1)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:0 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `3593`
		// Minimum execution time: 92_000_000 picoseconds.
		Weight::from_parts(94_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Images` (r:1 w:0)
	/// Proof: `PolimecFunding::Images` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn edit_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `609`
		//  Estimated: `3814`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3814)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_evaluation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `562 + x * (29 ±0)`
		//  Estimated: `3814 + x * (2502 ±0)`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(21_490_523, 3814)
			// Standard Error: 5_416
			.saturating_add(Weight::from_parts(2_287_829, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:4558 w:2)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 10000]`.
	fn start_auction_manually(x: u32 ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (539 ±0) + y * (13 ±0)`
		//  Estimated: `217021 + x * (8051 ±6_772) + y * (979 ±66)`
		// Minimum execution time: 321_000_000 picoseconds.
		Weight::from_parts(325_000_000, 217021)
			// Standard Error: 3_856_088
			.saturating_add(Weight::from_parts(10_425_661, 0).saturating_mul(x.into()))
			// Standard Error: 38_223
			.saturating_add(T::DbWeight::get().reads(87_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8051).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextEvaluationId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:16 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::EvaluationCounts` (r:1 w:1)
	/// Proof: `PolimecFunding::EvaluationCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 15]`.
	fn evaluation_to_limit(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `941 + x * (137 ±0)`
		//  Estimated: `4614 + x * (2820 ±0)`
		// Minimum execution time: 70_000_000 picoseconds.
		Weight::from_parts(73_938_801, 4614)
			// Standard Error: 20_740
			.saturating_add(Weight::from_parts(3_615_461, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 2820).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextEvaluationId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:17 w:2)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::EvaluationCounts` (r:1 w:1)
	/// Proof: `PolimecFunding::EvaluationCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn evaluation_over_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3148`
		//  Estimated: `48930`
		// Minimum execution time: 152_000_000 picoseconds.
		Weight::from_parts(158_000_000, 48930)
			.saturating_add(T::DbWeight::get().reads(22_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:128 w:10)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::BidCounts` (r:1 w:1)
	/// Proof: `PolimecFunding::BidCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:1 w:1)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextBidId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextBidId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 127]`.
	/// The range of component `y` is `[0, 10]`.
	fn bid(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2278 + x * (164 ±0)`
		//  Estimated: `6208 + x * (2893 ±0)`
		// Minimum execution time: 539_000_000 picoseconds.
		Weight::from_parts(84_439_405, 6208)
			// Standard Error: 20_670
			.saturating_add(Weight::from_parts(3_779_627, 0).saturating_mul(x.into()))
			// Standard Error: 250_512
			.saturating_add(Weight::from_parts(73_255_675, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2893).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:256 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 255]`.
	fn contribution(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2246 + x * (137 ±0)`
		//  Estimated: `6208 + x * (2839 ±0)`
		// Minimum execution time: 124_000_000 picoseconds.
		Weight::from_parts(128_568_935, 6208)
			// Standard Error: 11_772
			.saturating_add(Weight::from_parts(3_704_148, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 2839).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:256 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:9833 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 255]`.
	/// The range of component `y` is `[1, 99]`.
	/// The range of component `z` is `[1, 10000]`.
	fn contribution_ends_round(x: u32, y: u32 ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `44564 + x * (137 ±0) + y * (254 ±0) + z * (21 ±0)`
		//  Estimated: `15401 + x * (2839 ±0) + y * (92965 ±6_111) + z * (1905 ±59)`
		// Minimum execution time: 1_120_000_000 picoseconds.
		Weight::from_parts(55_806_166, 15401)
			// Standard Error: 7_331_488
			.saturating_add(Weight::from_parts(111_668_126, 0).saturating_mul(y.into()))
			// Standard Error: 71_852
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().reads((37_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 2839).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 92965).saturating_mul(y.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:2980 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 10000]`.
	fn decide_project_outcome(x: u32 ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4454 + x * (93 ±0) + y * (11 ±0)`
		//  Estimated: `28512 + x * (3946 ±3_374) + y * (1161 ±33)`
		// Minimum execution time: 58_000_000 picoseconds.
		Weight::from_parts(59_000_000, 28512)
			// Standard Error: 3_928_236
			.saturating_add(Weight::from_parts(3_329_337, 0).saturating_mul(x.into()))
			// Standard Error: 38_938
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 3946).saturating_mul(x.into()))
	}

	fn settle_successful_evaluation() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn settle_failed_evaluation() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn settle_successful_bid() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn settle_failed_bid() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn settle_successful_contribution() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn settle_failed_contribution() -> Weight {
		Weight::from_parts(0, 0)
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:4 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:99 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_evaluation_success(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1174 + x * (29 ±0)`
		//  Estimated: `12270 + x * (2502 ±0)`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(36_057_447, 12270)
			// Standard Error: 5_687
			.saturating_add(Weight::from_parts(2_349_611, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:4 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	fn end_evaluation_failure() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1148`
		//  Estimated: `12270`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(35_000_000, 12270)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_candle_phase(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `446 + x * (29 ±0)`
		//  Estimated: `3814 + x * (2502 ±0)`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_987_956, 3814)
			// Standard Error: 5_995
			.saturating_add(Weight::from_parts(2_286_160, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Nonce` (r:1 w:1)
	/// Proof: `PolimecFunding::Nonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:2049 w:2048)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:1025 w:1025)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1024 w:1024)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1024 w:1024)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:1 w:0)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 1024]`.
	/// The range of component `z` is `[0, 1024]`.
	fn start_community_funding(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `86802 + x * (29 ±0) + y * (167 ±0) + z * (367 ±0)`
		//  Estimated: `4079 + x * (2502 ±0) + y * (2893 ±0) + z * (3624 ±0)`
		// Minimum execution time: 8_733_000_000 picoseconds.
		Weight::from_parts(8_889_000_000, 4079)
			// Standard Error: 235_341
			.saturating_add(Weight::from_parts(6_457_226, 0).saturating_mul(y.into()))
			// Standard Error: 235_237
			.saturating_add(Weight::from_parts(70_277_060, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(z.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(z.into())))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2893).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 3624).saturating_mul(z.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_remainder_funding(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `536 + x * (29 ±0)`
		//  Estimated: `3814 + x * (2502 ±0)`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_694_146, 3814)
			// Standard Error: 5_669
			.saturating_add(Weight::from_parts(2_256_677, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_automatically_rejected_evaluators_slashed(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `824 + x * (29 ±0)`
		//  Estimated: `3814 + x * (2502 ±0)`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(23_753_565, 3814)
			// Standard Error: 4_976
			.saturating_add(Weight::from_parts(2_285_728, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_awaiting_decision_evaluators_slashed(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `823 + x * (29 ±0)`
		//  Estimated: `3814 + x * (2502 ±0)`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_149_882, 3814)
			// Standard Error: 4_893
			.saturating_add(Weight::from_parts(2_241_882, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_awaiting_decision_evaluators_unchanged(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `823 + x * (29 ±0)`
		//  Estimated: `3814 + x * (2502 ±0)`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_735_663, 3814)
			// Standard Error: 5_515
			.saturating_add(Weight::from_parts(2_252_806, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:2048 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 2048]`.
	fn end_funding_automatically_accepted_evaluators_rewarded(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1184 + x * (29 ±0) + y * (187 ±0)`
		//  Estimated: `3814 + x * (2502 ±0) + y * (2820 ±0)`
		// Minimum execution time: 257_000_000 picoseconds.
		Weight::from_parts(260_000_000, 3814)
			// Standard Error: 52_986
			.saturating_add(Weight::from_parts(476_614, 0).saturating_mul(x.into()))
			// Standard Error: 2_564
			.saturating_add(Weight::from_parts(4_091_225, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2820).saturating_mul(y.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:2 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	fn project_decision() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563`
		//  Estimated: `5994`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 5994)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Metadata` (r:1 w:1)
	/// Proof: `LocalAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn start_settlement_funding_success() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `970`
		//  Estimated: `3814`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(43_000_000, 3814)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	fn start_settlement_funding_failure() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `760`
		//  Estimated: `3814`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3814)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `PolimecFunding::NextProjectId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextProjectId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Images` (r:1 w:1)
	/// Proof: `PolimecFunding::Images` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:0 w:1)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:0 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `3593`
		// Minimum execution time: 92_000_000 picoseconds.
		Weight::from_parts(94_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Images` (r:1 w:0)
	/// Proof: `PolimecFunding::Images` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn edit_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `609`
		//  Estimated: `3814`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3814)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_evaluation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `562 + x * (29 ±0)`
		//  Estimated: `3814 + x * (2502 ±0)`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(21_490_523, 3814)
			// Standard Error: 5_416
			.saturating_add(Weight::from_parts(2_287_829, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:4558 w:2)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 10000]`.
	fn start_auction_manually(x: u32 ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (539 ±0) + y * (13 ±0)`
		//  Estimated: `217021 + x * (8051 ±6_772) + y * (979 ±66)`
		// Minimum execution time: 321_000_000 picoseconds.
		Weight::from_parts(325_000_000, 217021)
			// Standard Error: 3_856_088
			.saturating_add(Weight::from_parts(10_425_661, 0).saturating_mul(x.into()))
			// Standard Error: 38_223
			.saturating_add(RocksDbWeight::get().reads(87_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8051).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextEvaluationId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:16 w:1)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::EvaluationCounts` (r:1 w:1)
	/// Proof: `PolimecFunding::EvaluationCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 15]`.
	fn evaluation_to_limit(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `941 + x * (137 ±0)`
		//  Estimated: `4614 + x * (2820 ±0)`
		// Minimum execution time: 70_000_000 picoseconds.
		Weight::from_parts(73_938_801, 4614)
			// Standard Error: 20_740
			.saturating_add(Weight::from_parts(3_615_461, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 2820).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextEvaluationId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:17 w:2)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::EvaluationCounts` (r:1 w:1)
	/// Proof: `PolimecFunding::EvaluationCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn evaluation_over_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3148`
		//  Estimated: `48930`
		// Minimum execution time: 152_000_000 picoseconds.
		Weight::from_parts(158_000_000, 48930)
			.saturating_add(RocksDbWeight::get().reads(22_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:128 w:10)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::BidCounts` (r:1 w:1)
	/// Proof: `PolimecFunding::BidCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:1 w:1)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextBidId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextBidId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 127]`.
	/// The range of component `y` is `[0, 10]`.
	fn bid(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2278 + x * (164 ±0)`
		//  Estimated: `6208 + x * (2893 ±0)`
		// Minimum execution time: 539_000_000 picoseconds.
		Weight::from_parts(84_439_405, 6208)
			// Standard Error: 20_670
			.saturating_add(Weight::from_parts(3_779_627, 0).saturating_mul(x.into()))
			// Standard Error: 250_512
			.saturating_add(Weight::from_parts(73_255_675, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2893).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:256 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 255]`.
	fn contribution(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2246 + x * (137 ±0)`
		//  Estimated: `6208 + x * (2839 ±0)`
		// Minimum execution time: 124_000_000 picoseconds.
		Weight::from_parts(128_568_935, 6208)
			// Standard Error: 11_772
			.saturating_add(Weight::from_parts(3_704_148, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 2839).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:256 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:9833 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 255]`.
	/// The range of component `y` is `[1, 99]`.
	/// The range of component `z` is `[1, 10000]`.
	fn contribution_ends_round(x: u32, y: u32 ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `44564 + x * (137 ±0) + y * (254 ±0) + z * (21 ±0)`
		//  Estimated: `15401 + x * (2839 ±0) + y * (92965 ±6_111) + z * (1905 ±59)`
		// Minimum execution time: 1_120_000_000 picoseconds.
		Weight::from_parts(55_806_166, 15401)
			// Standard Error: 7_331_488
			.saturating_add(Weight::from_parts(111_668_126, 0).saturating_mul(y.into()))
			// Standard Error: 71_852
			.saturating_add(RocksDbWeight::get().reads(17_u64))
			.saturating_add(RocksDbWeight::get().reads((37_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 2839).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 92965).saturating_mul(y.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:2980 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 10000]`.
	fn decide_project_outcome(x: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4454 + x * (93 ±0) + y * (11 ±0)`
		//  Estimated: `28512 + x * (3946 ±3_374) + y * (1161 ±33)`
		// Minimum execution time: 58_000_000 picoseconds.
		Weight::from_parts(59_000_000, 28512)
			// Standard Error: 3_928_236
			.saturating_add(Weight::from_parts(3_329_337, 0).saturating_mul(x.into()))
			// Standard Error: 38_938
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 3946).saturating_mul(x.into()))
	}
	fn settle_successful_evaluation() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn settle_failed_evaluation() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn settle_successful_bid() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn settle_failed_bid() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn settle_successful_contribution() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn settle_failed_contribution() -> Weight {
		Weight::from_parts(0, 0)
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:4 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:99 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_evaluation_success(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1174 + x * (29 ±0)`
		//  Estimated: `12270 + x * (2502 ±0)`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(36_057_447, 12270)
			// Standard Error: 5_687
			.saturating_add(Weight::from_parts(2_349_611, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:4 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	fn end_evaluation_failure() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1148`
		//  Estimated: `12270`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(35_000_000, 12270)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_candle_phase(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `446 + x * (29 ±0)`
		//  Estimated: `3814 + x * (2502 ±0)`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_987_956, 3814)
			// Standard Error: 5_995
			.saturating_add(Weight::from_parts(2_286_160, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Nonce` (r:1 w:1)
	/// Proof: `PolimecFunding::Nonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Bids` (r:2049 w:2048)
	/// Proof: `PolimecFunding::Bids` (`max_values`: None, `max_size`: Some(418), added: 2893, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:1025 w:1025)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1024 w:1024)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1024 w:1024)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Buckets` (r:1 w:0)
	/// Proof: `PolimecFunding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 1024]`.
	/// The range of component `z` is `[0, 1024]`.
	fn start_community_funding(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `86802 + x * (29 ±0) + y * (167 ±0) + z * (367 ±0)`
		//  Estimated: `4079 + x * (2502 ±0) + y * (2893 ±0) + z * (3624 ±0)`
		// Minimum execution time: 8_733_000_000 picoseconds.
		Weight::from_parts(8_889_000_000, 4079)
			// Standard Error: 235_341
			.saturating_add(Weight::from_parts(6_457_226, 0).saturating_mul(y.into()))
			// Standard Error: 235_237
			.saturating_add(Weight::from_parts(70_277_060, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(z.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(z.into())))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2893).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 3624).saturating_mul(z.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_remainder_funding(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `536 + x * (29 ±0)`
		//  Estimated: `3814 + x * (2502 ±0)`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_694_146, 3814)
			// Standard Error: 5_669
			.saturating_add(Weight::from_parts(2_256_677, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_automatically_rejected_evaluators_slashed(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `824 + x * (29 ±0)`
		//  Estimated: `3814 + x * (2502 ±0)`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(23_753_565, 3814)
			// Standard Error: 4_976
			.saturating_add(Weight::from_parts(2_285_728, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_awaiting_decision_evaluators_slashed(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `823 + x * (29 ±0)`
		//  Estimated: `3814 + x * (2502 ±0)`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_149_882, 3814)
			// Standard Error: 4_893
			.saturating_add(Weight::from_parts(2_241_882, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_awaiting_decision_evaluators_unchanged(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `823 + x * (29 ±0)`
		//  Estimated: `3814 + x * (2502 ±0)`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_735_663, 3814)
			// Standard Error: 5_515
			.saturating_add(Weight::from_parts(2_252_806, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:2048 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 2048]`.
	fn end_funding_automatically_accepted_evaluators_rewarded(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1184 + x * (29 ±0) + y * (187 ±0)`
		//  Estimated: `3814 + x * (2502 ±0) + y * (2820 ±0)`
		// Minimum execution time: 257_000_000 picoseconds.
		Weight::from_parts(260_000_000, 3814)
			// Standard Error: 52_986
			.saturating_add(Weight::from_parts(476_614, 0).saturating_mul(x.into()))
			// Standard Error: 2_564
			.saturating_add(Weight::from_parts(4_091_225, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2502).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2820).saturating_mul(y.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:2 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	fn project_decision() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563`
		//  Estimated: `5994`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 5994)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Asset` (r:1 w:1)
	/// Proof: `LocalAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LocalAssets::Metadata` (r:1 w:1)
	/// Proof: `LocalAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn start_settlement_funding_success() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `970`
		//  Estimated: `3814`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(43_000_000, 3814)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	fn start_settlement_funding_failure() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `760`
		//  Estimated: `3814`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3814)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}