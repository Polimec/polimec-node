// Polimec Blockchain â€“ https://www.polimec.org/
// Copyright (C) Polimec 2022. All rights reserved.

// The Polimec Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The Polimec Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_funding
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-14, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `omegabit`, CPU: `13th Gen Intel(R) Core(TM) i9-13900K`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/polimec-standalone-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_funding
// --extrinsic
// *
// --execution=wasm
// --heap-pages=4096
// --output=pallets/funding/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_funding.
pub trait WeightInfo {
	fn note_image() -> Weight;
	fn create() -> Weight;
	fn start_evaluation() -> Weight;
	fn bond() -> Weight;
	fn edit_metadata() -> Weight;
	fn start_auction() -> Weight;
	fn bid() -> Weight;
	fn contribute() -> Weight;
	fn claim_contribution_tokens() -> Weight;
	fn on_initialize() -> Weight;
}

/// Weights for pallet_funding using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: PolimecFunding Images (r:0 w:1)
	fn note_image() -> Weight {
		// Minimum execution time: 9_851 nanoseconds.
		Weight::from_ref_time(10_301_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: PolimecFunding Images (r:1 w:0)
	// Storage: PolimecFunding NextProjectId (r:1 w:1)
	// Storage: PolimecFunding Projects (r:0 w:1)
	// Storage: PolimecFunding ProjectsInfo (r:0 w:1)
	// Storage: PolimecFunding ProjectsIssuers (r:0 w:1)
	fn create() -> Weight {
		// Minimum execution time: 17_189 nanoseconds.
		Weight::from_ref_time(18_448_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: PolimecFunding ProjectsIssuers (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:1 w:1)
	// Storage: PolimecFunding ProjectsActive (r:1 w:1)
	fn start_evaluation() -> Weight {
		// Minimum execution time: 16_844 nanoseconds.
		Weight::from_ref_time(17_369_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: PolimecFunding ProjectsIssuers (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: PolimecFunding Bonds (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn bond() -> Weight {
		// Minimum execution time: 21_940 nanoseconds.
		Weight::from_ref_time(22_778_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: PolimecFunding ProjectsIssuers (r:1 w:0)
	// Storage: PolimecFunding Images (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:1 w:0)
	// Storage: PolimecFunding Projects (r:1 w:1)
	fn edit_metadata() -> Weight {
		// Minimum execution time: 17_614 nanoseconds.
		Weight::from_ref_time(18_256_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: PolimecFunding ProjectsIssuers (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:1 w:1)
	fn start_auction() -> Weight {
		// Minimum execution time: 18_842 nanoseconds.
		Weight::from_ref_time(19_545_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: PolimecFunding ProjectsIssuers (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:1 w:0)
	// Storage: PolimecFunding Projects (r:1 w:0)
	// Storage: PolimecFunding AuctionsInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn bid() -> Weight {
		// Minimum execution time: 30_898 nanoseconds.
		Weight::from_ref_time(32_810_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: PolimecFunding ProjectsIssuers (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: PolimecFunding Contributions (r:1 w:1)
	fn contribute() -> Weight {
		// Minimum execution time: 36_569 nanoseconds.
		Weight::from_ref_time(37_812_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: PolimecFunding ProjectsInfo (r:1 w:0)
	// Storage: PolimecFunding Contributions (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn claim_contribution_tokens() -> Weight {
		// Minimum execution time: 32_528 nanoseconds.
		Weight::from_ref_time(34_112_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: PolimecFunding ProjectsActive (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:100 w:100)
	// Storage: PolimecFunding Bonds (r:200 w:0)
	fn on_initialize() -> Weight {
		// Minimum execution time: 1_226_276 nanoseconds.
		Weight::from_ref_time(1_241_334_000)
			.saturating_add(T::DbWeight::get().reads(301))
			.saturating_add(T::DbWeight::get().writes(100))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: PolimecFunding Images (r:0 w:1)
	fn note_image() -> Weight {
		// Minimum execution time: 9_851 nanoseconds.
		Weight::from_ref_time(10_301_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: PolimecFunding Images (r:1 w:0)
	// Storage: PolimecFunding NextProjectId (r:1 w:1)
	// Storage: PolimecFunding Projects (r:0 w:1)
	// Storage: PolimecFunding ProjectsInfo (r:0 w:1)
	// Storage: PolimecFunding ProjectsIssuers (r:0 w:1)
	fn create() -> Weight {
		// Minimum execution time: 17_189 nanoseconds.
		Weight::from_ref_time(18_448_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: PolimecFunding ProjectsIssuers (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:1 w:1)
	// Storage: PolimecFunding ProjectsActive (r:1 w:1)
	fn start_evaluation() -> Weight {
		// Minimum execution time: 16_844 nanoseconds.
		Weight::from_ref_time(17_369_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: PolimecFunding ProjectsIssuers (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: PolimecFunding Bonds (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn bond() -> Weight {
		// Minimum execution time: 21_940 nanoseconds.
		Weight::from_ref_time(22_778_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: PolimecFunding ProjectsIssuers (r:1 w:0)
	// Storage: PolimecFunding Images (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:1 w:0)
	// Storage: PolimecFunding Projects (r:1 w:1)
	fn edit_metadata() -> Weight {
		// Minimum execution time: 17_614 nanoseconds.
		Weight::from_ref_time(18_256_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: PolimecFunding ProjectsIssuers (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:1 w:1)
	fn start_auction() -> Weight {
		// Minimum execution time: 18_842 nanoseconds.
		Weight::from_ref_time(19_545_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: PolimecFunding ProjectsIssuers (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:1 w:0)
	// Storage: PolimecFunding Projects (r:1 w:0)
	// Storage: PolimecFunding AuctionsInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn bid() -> Weight {
		// Minimum execution time: 30_898 nanoseconds.
		Weight::from_ref_time(32_810_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: PolimecFunding ProjectsIssuers (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: PolimecFunding Contributions (r:1 w:1)
	fn contribute() -> Weight {
		// Minimum execution time: 36_569 nanoseconds.
		Weight::from_ref_time(37_812_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: PolimecFunding ProjectsInfo (r:1 w:0)
	// Storage: PolimecFunding Contributions (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn claim_contribution_tokens() -> Weight {
		// Minimum execution time: 32_528 nanoseconds.
		Weight::from_ref_time(34_112_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: PolimecFunding ProjectsActive (r:1 w:0)
	// Storage: PolimecFunding ProjectsInfo (r:100 w:100)
	// Storage: PolimecFunding Bonds (r:200 w:0)
	fn on_initialize() -> Weight {
		// Minimum execution time: 1_226_276 nanoseconds.
		Weight::from_ref_time(1_241_334_000)
			.saturating_add(RocksDbWeight::get().reads(301))
			.saturating_add(RocksDbWeight::get().writes(100))
	}
}