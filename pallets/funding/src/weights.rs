// Polimec Blockchain – https://www.polimec.org/
// Copyright (C) Polimec 2022. All rights reserved.

// The Polimec Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The Polimec Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@polimec.org


//! Autogenerated weights for `pallet_funding`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-05-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-23-147`, CPU: `AMD EPYC 9R14`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("polimec-local")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/polimec-node
// benchmark
// pallet
// --chain=polimec-local
// --steps=50
// --repeat=20
// --pallet=pallet-funding
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic
// *
// --wasm-execution=compiled
// --heap-pages=4096
// --output=pallets/funding/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_funding`.
pub trait WeightInfo {
	fn create_project() -> Weight;
	fn remove_project() -> Weight;
	fn edit_project() -> Weight;
	fn start_evaluation(x: u32, ) -> Weight;
	fn start_auction_manually(x: u32, ) -> Weight;
	fn evaluation(x: u32, ) -> Weight;
	fn bid(x: u32, y: u32, ) -> Weight;
	fn contribution(x: u32, ) -> Weight;
	fn contribution_ends_round(x: u32, y: u32, ) -> Weight;
	fn decide_project_outcome(x: u32, ) -> Weight;
	fn settle_successful_evaluation() -> Weight;
	fn settle_failed_evaluation() -> Weight;
	fn settle_successful_bid() -> Weight;
	fn settle_failed_bid() -> Weight;
	fn settle_successful_contribution() -> Weight;
	fn settle_failed_contribution() -> Weight;
	fn end_evaluation_success(x: u32, ) -> Weight;
	fn end_evaluation_failure(x: u32, ) -> Weight;
	fn start_auction_closing_phase(x: u32, ) -> Weight;
	fn end_auction_closing(x: u32, y: u32, z: u32, ) -> Weight;
	fn start_community_funding(x: u32, y: u32, z: u32, ) -> Weight;
	fn start_remainder_funding(x: u32, ) -> Weight;
	fn end_funding_automatically_rejected_evaluators_slashed(x: u32, ) -> Weight;
	fn end_funding_awaiting_decision_evaluators_slashed(x: u32, ) -> Weight;
	fn end_funding_awaiting_decision_evaluators_unchanged(x: u32, ) -> Weight;
	fn end_funding_automatically_accepted_evaluators_rewarded(x: u32, y: u32, ) -> Weight;
	fn project_decision() -> Weight;
	fn start_settlement_funding_success() -> Weight;
	fn start_settlement_funding_failure() -> Weight;
	fn start_pallet_migration() -> Weight;
	fn start_offchain_migration() -> Weight;
	fn confirm_offchain_migration(_x: u32) -> Weight;
	fn mark_project_ct_migration_as_finished() -> Weight;
	fn start_pallet_migration_readiness_check() -> Weight;
	fn pallet_migration_readiness_response_holding() -> Weight;
	fn pallet_migration_readiness_response_pallet_info() -> Weight;
	fn send_pallet_migration_for(_x: u32) -> Weight;
	fn confirm_pallet_migrations(_x: u32) -> Weight;
}

/// Weights for `pallet_funding` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextProjectId` (r:1 w:1)
	/// Proof: `Funding::NextProjectId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:1 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:0 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:0 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	fn create_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `254`
		//  Estimated: `3593`
		// Minimum execution time: 162_040_000 picoseconds.
		Weight::from_parts(163_110_000, 3593)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:0 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	fn remove_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `464`
		//  Estimated: `3845`
		// Minimum execution time: 128_240_000 picoseconds.
		Weight::from_parts(129_140_000, 3845)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:0 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	fn edit_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `464`
		//  Estimated: `3845`
		// Minimum execution time: 130_190_000 picoseconds.
		Weight::from_parts(132_430_000, 3845)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_evaluation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787 + x * (28 ±0)`
		//  Estimated: `3967 + x * (2501 ±0)`
		// Minimum execution time: 132_921_000 picoseconds.
		Weight::from_parts(134_319_245, 3967)
			// Standard Error: 3_386
			.saturating_add(Weight::from_parts(2_065_595, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_auction_manually(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `580 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 132_130_000 picoseconds.
		Weight::from_parts(133_001_162, 3845)
			// Standard Error: 3_815
			.saturating_add(Weight::from_parts(2_072_477, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextEvaluationId` (r:1 w:1)
	/// Proof: `Funding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Funding::EvaluationCounts` (r:1 w:1)
	/// Proof: `Funding::EvaluationCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:16 w:1)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 15]`.
	fn evaluation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1330 + x * (194 ±0)`
		//  Estimated: `4614 + x * (2729 ±0)`
		// Minimum execution time: 176_820_000 picoseconds.
		Weight::from_parts(181_813_500, 4614)
			// Standard Error: 14_820
			.saturating_add(Weight::from_parts(3_843_576, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 2729).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:1 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::BidCounts` (r:1 w:1)
	/// Proof: `Funding::BidCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Bids` (r:7 w:10)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextBidId` (r:1 w:1)
	/// Proof: `Funding::NextBidId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::AuctionBoughtUSD` (r:1 w:1)
	/// Proof: `Funding::AuctionBoughtUSD` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Metadata` (r:1 w:0)
	/// Proof: `ForeignAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 6]`.
	/// The range of component `y` is `[0, 10]`.
	fn bid(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2946 + x * (224 ±0)`
		//  Estimated: `6208 + x * (2781 ±0)`
		// Minimum execution time: 277_620_000 picoseconds.
		Weight::from_parts(223_685_539, 6208)
			// Standard Error: 240_822
			.saturating_add(Weight::from_parts(2_898_665, 0).saturating_mul(x.into()))
			// Standard Error: 150_996
			.saturating_add(Weight::from_parts(65_615_025, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2781).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:1 w:0)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Contributions` (r:16 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(252), added: 2727, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ContributionBoughtUSD` (r:1 w:1)
	/// Proof: `Funding::ContributionBoughtUSD` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Metadata` (r:1 w:0)
	/// Proof: `ForeignAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Funding::RetailParticipations` (r:1 w:1)
	/// Proof: `Funding::RetailParticipations` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextContributionId` (r:1 w:1)
	/// Proof: `Funding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 15]`.
	fn contribution(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3170 + x * (192 ±0)`
		//  Estimated: `6208 + x * (2727 ±0)`
		// Minimum execution time: 250_080_000 picoseconds.
		Weight::from_parts(263_060_271, 6208)
			// Standard Error: 30_917
			.saturating_add(Weight::from_parts(3_971_799, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(9_u64))
			.saturating_add(Weight::from_parts(0, 2727).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:1 w:0)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Contributions` (r:16 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(252), added: 2727, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ContributionBoughtUSD` (r:1 w:1)
	/// Proof: `Funding::ContributionBoughtUSD` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Metadata` (r:1 w:0)
	/// Proof: `ForeignAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Funding::RetailParticipations` (r:1 w:1)
	/// Proof: `Funding::RetailParticipations` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextContributionId` (r:1 w:1)
	/// Proof: `Funding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 15]`.
	/// The range of component `y` is `[1, 99]`.
	fn contribution_ends_round(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3249 + x * (192 ±0) + y * (28 ±0)`
		//  Estimated: `6208 + x * (2727 ±0) + y * (2501 ±0)`
		// Minimum execution time: 325_801_000 picoseconds.
		Weight::from_parts(257_648_668, 6208)
			// Standard Error: 28_720
			.saturating_add(Weight::from_parts(4_654_256, 0).saturating_mul(x.into()))
			// Standard Error: 4_572
			.saturating_add(Weight::from_parts(2_265_538, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(10_u64))
			.saturating_add(Weight::from_parts(0, 2727).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(y.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn decide_project_outcome(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `833 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 140_661_000 picoseconds.
		Weight::from_parts(143_365_239, 3845)
			// Standard Error: 4_867
			.saturating_add(Weight::from_parts(2_055_896, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::Evaluations` (r:1 w:1)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(3006), added: 5481, mode: `MaxEncodedLen`)
	fn settle_successful_evaluation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2122`
		//  Estimated: `6471`
		// Minimum execution time: 85_140_000 picoseconds.
		Weight::from_parts(86_991_000, 6471)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Funding::Evaluations` (r:1 w:1)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn settle_failed_evaluation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1761`
		//  Estimated: `4614`
		// Minimum execution time: 80_770_000 picoseconds.
		Weight::from_parts(81_870_000, 4614)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Funding::Bids` (r:1 w:1)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(3006), added: 5481, mode: `MaxEncodedLen`)
	fn settle_successful_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2583`
		//  Estimated: `6471`
		// Minimum execution time: 101_290_000 picoseconds.
		Weight::from_parts(103_330_000, 6471)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: `Funding::Bids` (r:1 w:1)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn settle_failed_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2300`
		//  Estimated: `6208`
		// Minimum execution time: 89_290_000 picoseconds.
		Weight::from_parts(90_770_000, 6208)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Funding::Contributions` (r:1 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(252), added: 2727, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(3006), added: 5481, mode: `MaxEncodedLen`)
	fn settle_successful_contribution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3184`
		//  Estimated: `6471`
		// Minimum execution time: 125_490_000 picoseconds.
		Weight::from_parts(126_960_000, 6471)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: `Funding::Contributions` (r:1 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(252), added: 2727, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn settle_failed_contribution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2288`
		//  Estimated: `6208`
		// Minimum execution time: 89_030_000 picoseconds.
		Weight::from_parts(90_780_000, 6208)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:99 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_evaluation_success(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `556 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 14_540_000 picoseconds.
		Weight::from_parts(13_745_442, 3845)
			// Standard Error: 2_004
			.saturating_add(Weight::from_parts(2_051_003, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	fn end_evaluation_failure(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `533`
		//  Estimated: `3845`
		// Minimum execution time: 11_410_000 picoseconds.
		Weight::from_parts(12_020_000, 3845)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_auction_closing_phase(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `598 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 17_890_000 picoseconds.
		Weight::from_parts(16_602_078, 3845)
			// Standard Error: 2_315
			.saturating_add(Weight::from_parts(2_124_318, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(397), added: 2872, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Nonce` (r:1 w:1)
	/// Proof: `Funding::Nonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Bids` (r:513 w:512)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:256 w:256)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:257 w:257)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:256 w:256)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:256 w:256)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:99 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 256]`.
	/// The range of component `z` is `[1, 256]`.
	fn end_auction_closing(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `28251 + x * (28 ±0) + y * (225 ±0) + z * (392 ±0)`
		//  Estimated: `4079 + x * (2501 ±0) + y * (2781 ±0) + z * (3624 ±0)`
		// Minimum execution time: 3_181_609_000 picoseconds.
		Weight::from_parts(208_634_454, 4079)
			// Standard Error: 64_217
			.saturating_add(Weight::from_parts(2_432_568, 0).saturating_mul(x.into()))
			// Standard Error: 24_628
			.saturating_add(Weight::from_parts(10_591_792, 0).saturating_mul(y.into()))
			// Standard Error: 24_628
			.saturating_add(Weight::from_parts(62_828_707, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(z.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(z.into())))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2781).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 3624).saturating_mul(z.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Nonce` (r:1 w:1)
	/// Proof: `Funding::Nonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Bids` (r:1025 w:1024)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:512 w:512)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:513 w:513)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:512 w:512)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:512 w:512)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[0, 512]`.
	/// The range of component `z` is `[0, 512]`.
	fn start_community_funding(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `47605 + x * (28 ±0) + y * (225 ±0) + z * (402 ±0)`
		//  Estimated: `4079 + x * (2501 ±0) + y * (2781 ±0) + z * (3624 ±0)`
		// Minimum execution time: 6_108_383_000 picoseconds.
		Weight::from_parts(6_128_573_000, 4079)
			// Standard Error: 120_329
			.saturating_add(Weight::from_parts(6_475_518, 0).saturating_mul(y.into()))
			// Standard Error: 120_329
			.saturating_add(Weight::from_parts(58_861_620, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(z.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(z.into())))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2781).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 3624).saturating_mul(z.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_remainder_funding(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `703 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 19_210_000 picoseconds.
		Weight::from_parts(18_910_312, 3845)
			// Standard Error: 3_157
			.saturating_add(Weight::from_parts(2_154_275, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_automatically_rejected_evaluators_slashed(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1113 + x * (29 ±0)`
		//  Estimated: `3967 + x * (2501 ±0)`
		// Minimum execution time: 26_980_000 picoseconds.
		Weight::from_parts(26_422_403, 3967)
			// Standard Error: 2_511
			.saturating_add(Weight::from_parts(2_172_469, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_awaiting_decision_evaluators_slashed(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1118 + x * (28 ±0)`
		//  Estimated: `3967 + x * (2501 ±0)`
		// Minimum execution time: 23_510_000 picoseconds.
		Weight::from_parts(24_959_485, 3967)
			// Standard Error: 2_723
			.saturating_add(Weight::from_parts(2_026_201, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_awaiting_decision_evaluators_unchanged(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1118 + x * (28 ±0)`
		//  Estimated: `3967 + x * (2501 ±0)`
		// Minimum execution time: 23_870_000 picoseconds.
		Weight::from_parts(24_518_432, 3967)
			// Standard Error: 2_885
			.saturating_add(Weight::from_parts(2_039_117, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1024 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 1024]`.
	fn end_funding_automatically_accepted_evaluators_rewarded(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1085 + x * (28 ±0) + y * (243 ±0)`
		//  Estimated: `3967 + x * (2501 ±0) + y * (2729 ±0)`
		// Minimum execution time: 247_981_000 picoseconds.
		Weight::from_parts(250_920_000, 3967)
			// Standard Error: 36_577
			.saturating_add(Weight::from_parts(524_025, 0).saturating_mul(x.into()))
			// Standard Error: 3_540
			.saturating_add(Weight::from_parts(4_257_910, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2729).saturating_mul(y.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:1 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	fn project_decision() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `781`
		//  Estimated: `3845`
		// Minimum execution time: 18_570_000 picoseconds.
		Weight::from_parts(19_310_000, 3845)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Metadata` (r:1 w:1)
	/// Proof: `ContributionTokens::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn start_settlement_funding_success() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1095`
		//  Estimated: `3967`
		// Minimum execution time: 61_860_000 picoseconds.
		Weight::from_parts(64_020_000, 3967)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	fn start_settlement_funding_failure() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1027`
		//  Estimated: `3967`
		// Minimum execution time: 14_910_000 picoseconds.
		Weight::from_parts(15_170_000, 3967)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	// TODO: add real benchmarked weights
	fn start_pallet_migration() -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn start_offchain_migration() -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn confirm_offchain_migration(_x: u32) -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn mark_project_ct_migration_as_finished() -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn start_pallet_migration_readiness_check() -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn pallet_migration_readiness_response_holding() -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn pallet_migration_readiness_response_pallet_info() -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn send_pallet_migration_for(_x: u32) -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn confirm_pallet_migrations(_x: u32) -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextProjectId` (r:1 w:1)
	/// Proof: `Funding::NextProjectId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:1 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:0 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:0 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	fn create_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `254`
		//  Estimated: `3593`
		// Minimum execution time: 162_040_000 picoseconds.
		Weight::from_parts(163_110_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:0 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	fn remove_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `464`
		//  Estimated: `3845`
		// Minimum execution time: 128_240_000 picoseconds.
		Weight::from_parts(129_140_000, 3845)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:0 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	fn edit_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `464`
		//  Estimated: `3845`
		// Minimum execution time: 130_190_000 picoseconds.
		Weight::from_parts(132_430_000, 3845)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_evaluation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787 + x * (28 ±0)`
		//  Estimated: `3967 + x * (2501 ±0)`
		// Minimum execution time: 132_921_000 picoseconds.
		Weight::from_parts(134_319_245, 3967)
			// Standard Error: 3_386
			.saturating_add(Weight::from_parts(2_065_595, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_auction_manually(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `580 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 132_130_000 picoseconds.
		Weight::from_parts(133_001_162, 3845)
			// Standard Error: 3_815
			.saturating_add(Weight::from_parts(2_072_477, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextEvaluationId` (r:1 w:1)
	/// Proof: `Funding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Funding::EvaluationCounts` (r:1 w:1)
	/// Proof: `Funding::EvaluationCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:16 w:1)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 15]`.
	fn evaluation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1330 + x * (194 ±0)`
		//  Estimated: `4614 + x * (2729 ±0)`
		// Minimum execution time: 176_820_000 picoseconds.
		Weight::from_parts(181_813_500, 4614)
			// Standard Error: 14_820
			.saturating_add(Weight::from_parts(3_843_576, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 2729).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:1 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::BidCounts` (r:1 w:1)
	/// Proof: `Funding::BidCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Bids` (r:7 w:10)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextBidId` (r:1 w:1)
	/// Proof: `Funding::NextBidId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::AuctionBoughtUSD` (r:1 w:1)
	/// Proof: `Funding::AuctionBoughtUSD` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Metadata` (r:1 w:0)
	/// Proof: `ForeignAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 6]`.
	/// The range of component `y` is `[0, 10]`.
	fn bid(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2946 + x * (224 ±0)`
		//  Estimated: `6208 + x * (2781 ±0)`
		// Minimum execution time: 277_620_000 picoseconds.
		Weight::from_parts(223_685_539, 6208)
			// Standard Error: 240_822
			.saturating_add(Weight::from_parts(2_898_665, 0).saturating_mul(x.into()))
			// Standard Error: 150_996
			.saturating_add(Weight::from_parts(65_615_025, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2781).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:1 w:0)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Contributions` (r:16 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(252), added: 2727, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ContributionBoughtUSD` (r:1 w:1)
	/// Proof: `Funding::ContributionBoughtUSD` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Metadata` (r:1 w:0)
	/// Proof: `ForeignAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Funding::RetailParticipations` (r:1 w:1)
	/// Proof: `Funding::RetailParticipations` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextContributionId` (r:1 w:1)
	/// Proof: `Funding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 15]`.
	fn contribution(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3170 + x * (192 ±0)`
		//  Estimated: `6208 + x * (2727 ±0)`
		// Minimum execution time: 250_080_000 picoseconds.
		Weight::from_parts(263_060_271, 6208)
			// Standard Error: 30_917
			.saturating_add(Weight::from_parts(3_971_799, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
			.saturating_add(Weight::from_parts(0, 2727).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:1 w:0)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Contributions` (r:16 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(252), added: 2727, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ContributionBoughtUSD` (r:1 w:1)
	/// Proof: `Funding::ContributionBoughtUSD` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Metadata` (r:1 w:0)
	/// Proof: `ForeignAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Funding::RetailParticipations` (r:1 w:1)
	/// Proof: `Funding::RetailParticipations` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextContributionId` (r:1 w:1)
	/// Proof: `Funding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 15]`.
	/// The range of component `y` is `[1, 99]`.
	fn contribution_ends_round(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3249 + x * (192 ±0) + y * (28 ±0)`
		//  Estimated: `6208 + x * (2727 ±0) + y * (2501 ±0)`
		// Minimum execution time: 325_801_000 picoseconds.
		Weight::from_parts(257_648_668, 6208)
			// Standard Error: 28_720
			.saturating_add(Weight::from_parts(4_654_256, 0).saturating_mul(x.into()))
			// Standard Error: 4_572
			.saturating_add(Weight::from_parts(2_265_538, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(17_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
			.saturating_add(Weight::from_parts(0, 2727).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(y.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn decide_project_outcome(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `833 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 140_661_000 picoseconds.
		Weight::from_parts(143_365_239, 3845)
			// Standard Error: 4_867
			.saturating_add(Weight::from_parts(2_055_896, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::Evaluations` (r:1 w:1)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(3006), added: 5481, mode: `MaxEncodedLen`)
	fn settle_successful_evaluation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2122`
		//  Estimated: `6471`
		// Minimum execution time: 85_140_000 picoseconds.
		Weight::from_parts(86_991_000, 6471)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Funding::Evaluations` (r:1 w:1)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn settle_failed_evaluation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1761`
		//  Estimated: `4614`
		// Minimum execution time: 80_770_000 picoseconds.
		Weight::from_parts(81_870_000, 4614)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Funding::Bids` (r:1 w:1)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(3006), added: 5481, mode: `MaxEncodedLen`)
	fn settle_successful_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2583`
		//  Estimated: `6471`
		// Minimum execution time: 101_290_000 picoseconds.
		Weight::from_parts(103_330_000, 6471)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: `Funding::Bids` (r:1 w:1)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn settle_failed_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2300`
		//  Estimated: `6208`
		// Minimum execution time: 89_290_000 picoseconds.
		Weight::from_parts(90_770_000, 6208)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Funding::Contributions` (r:1 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(252), added: 2727, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(3006), added: 5481, mode: `MaxEncodedLen`)
	fn settle_successful_contribution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3184`
		//  Estimated: `6471`
		// Minimum execution time: 125_490_000 picoseconds.
		Weight::from_parts(126_960_000, 6471)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: `Funding::Contributions` (r:1 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(252), added: 2727, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn settle_failed_contribution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2288`
		//  Estimated: `6208`
		// Minimum execution time: 89_030_000 picoseconds.
		Weight::from_parts(90_780_000, 6208)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:99 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_evaluation_success(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `556 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 14_540_000 picoseconds.
		Weight::from_parts(13_745_442, 3845)
			// Standard Error: 2_004
			.saturating_add(Weight::from_parts(2_051_003, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	fn end_evaluation_failure(_x: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `533`
		//  Estimated: `3845`
		// Minimum execution time: 11_410_000 picoseconds.
		Weight::from_parts(12_020_000, 3845)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_auction_closing_phase(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `598 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 17_890_000 picoseconds.
		Weight::from_parts(16_602_078, 3845)
			// Standard Error: 2_315
			.saturating_add(Weight::from_parts(2_124_318, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(397), added: 2872, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Nonce` (r:1 w:1)
	/// Proof: `Funding::Nonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Bids` (r:513 w:512)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:256 w:256)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:257 w:257)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:256 w:256)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:256 w:256)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:99 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 256]`.
	/// The range of component `z` is `[1, 256]`.
	fn end_auction_closing(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `28251 + x * (28 ±0) + y * (225 ±0) + z * (392 ±0)`
		//  Estimated: `4079 + x * (2501 ±0) + y * (2781 ±0) + z * (3624 ±0)`
		// Minimum execution time: 3_181_609_000 picoseconds.
		Weight::from_parts(208_634_454, 4079)
			// Standard Error: 64_217
			.saturating_add(Weight::from_parts(2_432_568, 0).saturating_mul(x.into()))
			// Standard Error: 24_628
			.saturating_add(Weight::from_parts(10_591_792, 0).saturating_mul(y.into()))
			// Standard Error: 24_628
			.saturating_add(Weight::from_parts(62_828_707, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(z.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(z.into())))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2781).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 3624).saturating_mul(z.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Nonce` (r:1 w:1)
	/// Proof: `Funding::Nonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Bids` (r:1025 w:1024)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:512 w:512)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:513 w:513)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:512 w:512)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:512 w:512)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[0, 512]`.
	/// The range of component `z` is `[0, 512]`.
	fn start_community_funding(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `47605 + x * (28 ±0) + y * (225 ±0) + z * (402 ±0)`
		//  Estimated: `4079 + x * (2501 ±0) + y * (2781 ±0) + z * (3624 ±0)`
		// Minimum execution time: 6_108_383_000 picoseconds.
		Weight::from_parts(6_128_573_000, 4079)
			// Standard Error: 120_329
			.saturating_add(Weight::from_parts(6_475_518, 0).saturating_mul(y.into()))
			// Standard Error: 120_329
			.saturating_add(Weight::from_parts(58_861_620, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(z.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(z.into())))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2781).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 3624).saturating_mul(z.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_remainder_funding(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `703 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 19_210_000 picoseconds.
		Weight::from_parts(18_910_312, 3845)
			// Standard Error: 3_157
			.saturating_add(Weight::from_parts(2_154_275, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_automatically_rejected_evaluators_slashed(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1113 + x * (29 ±0)`
		//  Estimated: `3967 + x * (2501 ±0)`
		// Minimum execution time: 26_980_000 picoseconds.
		Weight::from_parts(26_422_403, 3967)
			// Standard Error: 2_511
			.saturating_add(Weight::from_parts(2_172_469, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_awaiting_decision_evaluators_slashed(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1118 + x * (28 ±0)`
		//  Estimated: `3967 + x * (2501 ±0)`
		// Minimum execution time: 23_510_000 picoseconds.
		Weight::from_parts(24_959_485, 3967)
			// Standard Error: 2_723
			.saturating_add(Weight::from_parts(2_026_201, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_awaiting_decision_evaluators_unchanged(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1118 + x * (28 ±0)`
		//  Estimated: `3967 + x * (2501 ±0)`
		// Minimum execution time: 23_870_000 picoseconds.
		Weight::from_parts(24_518_432, 3967)
			// Standard Error: 2_885
			.saturating_add(Weight::from_parts(2_039_117, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1024 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 1024]`.
	fn end_funding_automatically_accepted_evaluators_rewarded(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1085 + x * (28 ±0) + y * (243 ±0)`
		//  Estimated: `3967 + x * (2501 ±0) + y * (2729 ±0)`
		// Minimum execution time: 247_981_000 picoseconds.
		Weight::from_parts(250_920_000, 3967)
			// Standard Error: 36_577
			.saturating_add(Weight::from_parts(524_025, 0).saturating_mul(x.into()))
			// Standard Error: 3_540
			.saturating_add(Weight::from_parts(4_257_910, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2729).saturating_mul(y.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:1 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	fn project_decision() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `781`
		//  Estimated: `3845`
		// Minimum execution time: 18_570_000 picoseconds.
		Weight::from_parts(19_310_000, 3845)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Metadata` (r:1 w:1)
	/// Proof: `ContributionTokens::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn start_settlement_funding_success() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1095`
		//  Estimated: `3967`
		// Minimum execution time: 61_860_000 picoseconds.
		Weight::from_parts(64_020_000, 3967)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	fn start_settlement_funding_failure() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1027`
		//  Estimated: `3967`
		// Minimum execution time: 14_910_000 picoseconds.
		Weight::from_parts(15_170_000, 3967)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	// TODO: Add real benchmarked weights
	fn start_pallet_migration() -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn start_offchain_migration() -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn confirm_offchain_migration(_x: u32) -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn mark_project_ct_migration_as_finished() -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn start_pallet_migration_readiness_check() -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn pallet_migration_readiness_response_holding() -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn pallet_migration_readiness_response_pallet_info() -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn send_pallet_migration_for(_x: u32) -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
	fn confirm_pallet_migrations(_x: u32) -> Weight {
		Weight::from_parts(100_000, 10_000)
	}
}