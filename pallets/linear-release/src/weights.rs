// Polimec Blockchain – https://www.polimec.org/
// Copyright (C) Polimec 2022. All rights reserved.

// The Polimec Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The Polimec Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@polimec.org


//! Autogenerated weights for `pallet_linear_release`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `alphabit`, CPU: `AMD Ryzen 7 5800X 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("polimec-rococo-local")`, DB CACHE: `1024`

// Executed Command:
// target/release/polimec-node
// benchmark
// pallet
// --chain=polimec-rococo-local
// --steps=50
// --repeat=20
// --pallet=pallet_linear_release
// --extrinsic
// *
// --execution=wasm
// --heap-pages=4096
// --output=pallets/linear-release/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_linear_release`.
pub trait WeightInfo {
	fn vest_locked(l: u32, s: u32, ) -> Weight;
	fn vest_unlocked(l: u32, s: u32, ) -> Weight;
	fn vest_other_locked(l: u32, s: u32, ) -> Weight;
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight;
	fn vested_transfer(l: u32, s: u32, ) -> Weight;
	fn force_vested_transfer(l: u32, s: u32, ) -> Weight;
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight;
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight;
	fn vest_all(l: u32, s: u32, ) -> Weight;
	fn vest_all_other(l: u32, s: u32, ) -> Weight;
}

/// Weights for `pallet_linear_release` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 40_787_000 picoseconds.
		Weight::from_parts(40_520_792, 4564)
			// Standard Error: 6_789
			.saturating_add(Weight::from_parts(156_381, 0).saturating_mul(l.into()))
			// Standard Error: 6_170
			.saturating_add(Weight::from_parts(157_442, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 52_158_000 picoseconds.
		Weight::from_parts(54_369_672, 4564)
			// Standard Error: 5_066
			.saturating_add(Weight::from_parts(73_768, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `361 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 42_150_000 picoseconds.
		Weight::from_parts(42_819_964, 4564)
			// Standard Error: 5_176
			.saturating_add(Weight::from_parts(72_520, 0).saturating_mul(l.into()))
			// Standard Error: 4_704
			.saturating_add(Weight::from_parts(112_111, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `361 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 54_142_000 picoseconds.
		Weight::from_parts(56_275_276, 4564)
			// Standard Error: 4_202
			.saturating_add(Weight::from_parts(41_865, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vested_transfer(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `377 + l * (21 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (21 ±0) + s * (36 ±0)`
		// Minimum execution time: 84_980_000 picoseconds.
		Weight::from_parts(86_418_170, 4564)
			// Standard Error: 6_138
			.saturating_add(Weight::from_parts(94_725, 0).saturating_mul(l.into()))
			// Standard Error: 5_578
			.saturating_add(Weight::from_parts(93_477, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn force_vested_transfer(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `501 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `6196 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 86_122_000 picoseconds.
		Weight::from_parts(87_927_051, 6196)
			// Standard Error: 5_737
			.saturating_add(Weight::from_parts(93_187, 0).saturating_mul(l.into()))
			// Standard Error: 5_214
			.saturating_add(Weight::from_parts(64_878, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[2, 12]`.
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 43_582_000 picoseconds.
		Weight::from_parts(44_096_742, 4564)
			// Standard Error: 3_083
			.saturating_add(Weight::from_parts(49_091, 0).saturating_mul(l.into()))
			// Standard Error: 2_801
			.saturating_add(Weight::from_parts(85_388, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[2, 12]`.
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 54_292_000 picoseconds.
		Weight::from_parts(55_422_287, 4564)
			// Standard Error: 9_394
			.saturating_add(Weight::from_parts(138_368, 0).saturating_mul(l.into()))
			// Standard Error: 8_537
			.saturating_add(Weight::from_parts(150_991, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:2 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_all(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `367 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `6287 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 48_401_000 picoseconds.
		Weight::from_parts(49_222_022, 6287)
			// Standard Error: 11_773
			.saturating_add(Weight::from_parts(107_727, 0).saturating_mul(l.into()))
			// Standard Error: 10_699
			.saturating_add(Weight::from_parts(211_880, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:2 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_all_other(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `470 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `6390 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 49_944_000 picoseconds.
		Weight::from_parts(52_923_786, 6390)
			// Standard Error: 7_842
			.saturating_add(Weight::from_parts(43_902, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 40_787_000 picoseconds.
		Weight::from_parts(40_520_792, 4564)
			// Standard Error: 6_789
			.saturating_add(Weight::from_parts(156_381, 0).saturating_mul(l.into()))
			// Standard Error: 6_170
			.saturating_add(Weight::from_parts(157_442, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 52_158_000 picoseconds.
		Weight::from_parts(54_369_672, 4564)
			// Standard Error: 5_066
			.saturating_add(Weight::from_parts(73_768, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `361 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 42_150_000 picoseconds.
		Weight::from_parts(42_819_964, 4564)
			// Standard Error: 5_176
			.saturating_add(Weight::from_parts(72_520, 0).saturating_mul(l.into()))
			// Standard Error: 4_704
			.saturating_add(Weight::from_parts(112_111, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `361 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 54_142_000 picoseconds.
		Weight::from_parts(56_275_276, 4564)
			// Standard Error: 4_202
			.saturating_add(Weight::from_parts(41_865, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vested_transfer(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `377 + l * (21 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (21 ±0) + s * (36 ±0)`
		// Minimum execution time: 84_980_000 picoseconds.
		Weight::from_parts(86_418_170, 4564)
			// Standard Error: 6_138
			.saturating_add(Weight::from_parts(94_725, 0).saturating_mul(l.into()))
			// Standard Error: 5_578
			.saturating_add(Weight::from_parts(93_477, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn force_vested_transfer(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `501 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `6196 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 86_122_000 picoseconds.
		Weight::from_parts(87_927_051, 6196)
			// Standard Error: 5_737
			.saturating_add(Weight::from_parts(93_187, 0).saturating_mul(l.into()))
			// Standard Error: 5_214
			.saturating_add(Weight::from_parts(64_878, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[2, 12]`.
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 43_582_000 picoseconds.
		Weight::from_parts(44_096_742, 4564)
			// Standard Error: 3_083
			.saturating_add(Weight::from_parts(49_091, 0).saturating_mul(l.into()))
			// Standard Error: 2_801
			.saturating_add(Weight::from_parts(85_388, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[2, 12]`.
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 54_292_000 picoseconds.
		Weight::from_parts(55_422_287, 4564)
			// Standard Error: 9_394
			.saturating_add(Weight::from_parts(138_368, 0).saturating_mul(l.into()))
			// Standard Error: 8_537
			.saturating_add(Weight::from_parts(150_991, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:2 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_all(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `367 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `6287 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 48_401_000 picoseconds.
		Weight::from_parts(49_222_022, 6287)
			// Standard Error: 11_773
			.saturating_add(Weight::from_parts(107_727, 0).saturating_mul(l.into()))
			// Standard Error: 10_699
			.saturating_add(Weight::from_parts(211_880, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:2 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_all_other(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `470 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `6390 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 49_944_000 picoseconds.
		Weight::from_parts(52_923_786, 6390)
			// Standard Error: 7_842
			.saturating_add(Weight::from_parts(43_902, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
}