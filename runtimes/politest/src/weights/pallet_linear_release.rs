
//! Autogenerated weights for `pallet_linear_release`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `alphabit`, CPU: `AMD Ryzen 7 5800X 8-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("polimec-rococo-local"), DB CACHE: 1024

// Executed Command:
// target/release/polimec-parachain-node
// benchmark
// pallet
// --chain=polimec-rococo-local
// --steps=50
// --repeat=20
// --pallet=pallet_linear_release
// --extrinsic
// *
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=runtimes/testnet/src/weights/pallet_linear_release.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_linear_release`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_linear_release::WeightInfo for WeightInfo<T> {
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 40_436_000 picoseconds.
		Weight::from_parts(41_665_178, 0)
			.saturating_add(Weight::from_parts(0, 4564))
			// Standard Error: 4_995
			.saturating_add(Weight::from_parts(69_050, 0).saturating_mul(l.into()))
			// Standard Error: 4_539
			.saturating_add(Weight::from_parts(59_550, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 51_878_000 picoseconds.
		Weight::from_parts(54_434_732, 0)
			.saturating_add(Weight::from_parts(0, 4564))
			// Standard Error: 6_503
			.saturating_add(Weight::from_parts(28_106, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `361 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 41_318_000 picoseconds.
		Weight::from_parts(43_127_543, 0)
			.saturating_add(Weight::from_parts(0, 4564))
			// Standard Error: 8_054
			.saturating_add(Weight::from_parts(52_457, 0).saturating_mul(l.into()))
			// Standard Error: 7_319
			.saturating_add(Weight::from_parts(115_465, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `361 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 52_860_000 picoseconds.
		Weight::from_parts(54_720_612, 0)
			.saturating_add(Weight::from_parts(0, 4564))
			// Standard Error: 9_057
			.saturating_add(Weight::from_parts(15_150, 0).saturating_mul(l.into()))
			// Standard Error: 8_231
			.saturating_add(Weight::from_parts(114_899, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vested_transfer(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `377 + l * (21 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (21 ±0) + s * (36 ±0)`
		// Minimum execution time: 82_976_000 picoseconds.
		Weight::from_parts(84_713_418, 0)
			.saturating_add(Weight::from_parts(0, 4564))
			// Standard Error: 8_488
			.saturating_add(Weight::from_parts(277_552, 0).saturating_mul(l.into()))
			// Standard Error: 7_714
			.saturating_add(Weight::from_parts(111_667, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn force_vested_transfer(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `501 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `6196 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 84_880_000 picoseconds.
		Weight::from_parts(86_596_223, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			// Standard Error: 8_053
			.saturating_add(Weight::from_parts(30_676, 0).saturating_mul(l.into()))
			// Standard Error: 7_318
			.saturating_add(Weight::from_parts(147_816, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[2, 12]`.
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 43_141_000 picoseconds.
		Weight::from_parts(43_854_236, 0)
			.saturating_add(Weight::from_parts(0, 4564))
			// Standard Error: 4_351
			.saturating_add(Weight::from_parts(34_727, 0).saturating_mul(l.into()))
			// Standard Error: 3_954
			.saturating_add(Weight::from_parts(85_349, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[2, 12]`.
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `4564 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 54_072_000 picoseconds.
		Weight::from_parts(55_053_459, 0)
			.saturating_add(Weight::from_parts(0, 4564))
			// Standard Error: 8_280
			.saturating_add(Weight::from_parts(135_425, 0).saturating_mul(l.into()))
			// Standard Error: 7_525
			.saturating_add(Weight::from_parts(84_993, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:2 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_all(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `367 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `6287 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 48_732_000 picoseconds.
		Weight::from_parts(50_725_369, 0)
			.saturating_add(Weight::from_parts(0, 6287))
			// Standard Error: 8_138
			.saturating_add(Weight::from_parts(101_347, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:2 w:1)
	/// Proof Skipped: Vesting Vesting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(1099), added: 3574, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 11]`.
	fn vest_all_other(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `470 + l * (10 ±0) + s * (36 ±0)`
		//  Estimated: `6390 + l * (8 ±0) + s * (38 ±0)`
		// Minimum execution time: 49_053_000 picoseconds.
		Weight::from_parts(50_199_018, 0)
			.saturating_add(Weight::from_parts(0, 6390))
			// Standard Error: 6_360
			.saturating_add(Weight::from_parts(60_973, 0).saturating_mul(l.into()))
			// Standard Error: 5_780
			.saturating_add(Weight::from_parts(159_524, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(s.into()))
	}
}
