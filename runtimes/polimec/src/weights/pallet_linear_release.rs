
//! Autogenerated weights for `pallet_linear_release`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 39.0.0
//! DATE: 2024-08-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-23-147`, CPU: `AMD EPYC 9R14`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("polimec-paseo-local")`, DB CACHE: 1024

// Executed Command:
// ./target/production/polimec-node
// benchmark
// pallet
// --chain=polimec-paseo-local
// --wasm-execution=compiled
// --pallet=pallet_linear_release
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=./runtimes/polimec/src/weights/pallet_linear_release.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_linear_release`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_linear_release::WeightInfo for WeightInfo<T> {
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 99]`.
	fn vest_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `153 + s * (36 ±0)`
		//  Estimated: `3640 + s * (36 ±0)`
		// Minimum execution time: 25_070_000 picoseconds.
		Weight::from_parts(25_570_064, 0)
			.saturating_add(Weight::from_parts(0, 3640))
			// Standard Error: 3_841
			.saturating_add(Weight::from_parts(52_917, 0).saturating_mul(l.into()))
			// Standard Error: 374
			.saturating_add(Weight::from_parts(65_131, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(s.into()))
	}
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 99]`.
	fn vest_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `153 + s * (36 ±0)`
		//  Estimated: `3640 + s * (36 ±0)`
		// Minimum execution time: 32_930_000 picoseconds.
		Weight::from_parts(33_781_704, 0)
			.saturating_add(Weight::from_parts(0, 3640))
			// Standard Error: 4_508
			.saturating_add(Weight::from_parts(27_988, 0).saturating_mul(l.into()))
			// Standard Error: 440
			.saturating_add(Weight::from_parts(59_104, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(s.into()))
	}
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 99]`.
	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `256 + s * (36 ±0)`
		//  Estimated: `3722 + s * (36 ±0)`
		// Minimum execution time: 27_190_000 picoseconds.
		Weight::from_parts(28_282_337, 0)
			.saturating_add(Weight::from_parts(0, 3722))
			// Standard Error: 4_314
			.saturating_add(Weight::from_parts(22_037, 0).saturating_mul(l.into()))
			// Standard Error: 421
			.saturating_add(Weight::from_parts(63_400, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(s.into()))
	}
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 99]`.
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `256 + s * (36 ±0)`
		//  Estimated: `3722 + s * (36 ±0)`
		// Minimum execution time: 35_700_000 picoseconds.
		Weight::from_parts(36_492_467, 0)
			.saturating_add(Weight::from_parts(0, 3722))
			// Standard Error: 4_674
			.saturating_add(Weight::from_parts(16_280, 0).saturating_mul(l.into()))
			// Standard Error: 456
			.saturating_add(Weight::from_parts(55_882, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(s.into()))
	}
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 99]`.
	fn vested_transfer(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293 + s * (36 ±0)`
		//  Estimated: `3759 + s * (36 ±0)`
		// Minimum execution time: 54_480_000 picoseconds.
		Weight::from_parts(56_200_070, 0)
			.saturating_add(Weight::from_parts(0, 3759))
			// Standard Error: 5_168
			.saturating_add(Weight::from_parts(30_598, 0).saturating_mul(l.into()))
			// Standard Error: 504
			.saturating_add(Weight::from_parts(68_584, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(s.into()))
	}
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 99]`.
	fn force_vested_transfer(_l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `433 + s * (36 ±0)`
		//  Estimated: `6196 + s * (36 ±0)`
		// Minimum execution time: 57_461_000 picoseconds.
		Weight::from_parts(59_120_635, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			// Standard Error: 524
			.saturating_add(Weight::from_parts(70_763, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(s.into()))
	}
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[2, 100]`.
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `256 + s * (36 ±0)`
		//  Estimated: `3720 + s * (36 ±0)`
		// Minimum execution time: 28_140_000 picoseconds.
		Weight::from_parts(28_577_300, 0)
			.saturating_add(Weight::from_parts(0, 3720))
			// Standard Error: 4_534
			.saturating_add(Weight::from_parts(23_143, 0).saturating_mul(l.into()))
			// Standard Error: 442
			.saturating_add(Weight::from_parts(68_391, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(s.into()))
	}
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[2, 100]`.
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `256 + s * (36 ±0)`
		//  Estimated: `3720 + s * (36 ±0)`
		// Minimum execution time: 36_410_000 picoseconds.
		Weight::from_parts(37_693_018, 0)
			.saturating_add(Weight::from_parts(0, 3720))
			// Standard Error: 5_007
			.saturating_add(Weight::from_parts(39_577, 0).saturating_mul(l.into()))
			// Standard Error: 488
			.saturating_add(Weight::from_parts(66_480, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(s.into()))
	}
	/// Storage: `LinearRelease::Vesting` (r:2 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 99]`.
	fn vest_all(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `228 + s * (36 ±0)`
		//  Estimated: `6169 + s * (36 ±0)`
		// Minimum execution time: 30_090_000 picoseconds.
		Weight::from_parts(31_131_478, 0)
			.saturating_add(Weight::from_parts(0, 6169))
			// Standard Error: 5_503
			.saturating_add(Weight::from_parts(48_646, 0).saturating_mul(l.into()))
			// Standard Error: 537
			.saturating_add(Weight::from_parts(80_710, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(s.into()))
	}
	/// Storage: `LinearRelease::Vesting` (r:2 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 9]`.
	/// The range of component `s` is `[1, 99]`.
	fn vest_all_other(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `331 + s * (36 ±0)`
		//  Estimated: `6272 + s * (36 ±0)`
		// Minimum execution time: 32_771_000 picoseconds.
		Weight::from_parts(33_590_039, 0)
			.saturating_add(Weight::from_parts(0, 6272))
			// Standard Error: 5_937
			.saturating_add(Weight::from_parts(19_831, 0).saturating_mul(l.into()))
			// Standard Error: 579
			.saturating_add(Weight::from_parts(82_741, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(s.into()))
	}
}
