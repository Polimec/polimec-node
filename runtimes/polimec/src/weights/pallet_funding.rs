
//! Autogenerated weights for `pallet_funding`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-23-147`, CPU: `AMD EPYC 9R14`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("polimec-paseo-local")`, DB CACHE: 1024

// Executed Command:
// target/production/polimec-node
// benchmark
// pallet
// --chain=polimec-paseo-local
// --steps=50
// --repeat=20
// --pallet=pallet-funding
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=runtimes/polimec/src/weights/pallet_funding.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_funding`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_funding::WeightInfo for WeightInfo<T> {
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextProjectId` (r:1 w:1)
	/// Proof: `Funding::NextProjectId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:1 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:0 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:0 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	fn create_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `254`
		//  Estimated: `3593`
		// Minimum execution time: 164_660_000 picoseconds.
		Weight::from_parts(166_280_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:0 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	fn remove_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `445`
		//  Estimated: `3807`
		// Minimum execution time: 130_870_000 picoseconds.
		Weight::from_parts(132_910_000, 0)
			.saturating_add(Weight::from_parts(0, 3807))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:0 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	fn edit_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `445`
		//  Estimated: `3807`
		// Minimum execution time: 132_880_000 picoseconds.
		Weight::from_parts(134_570_000, 0)
			.saturating_add(Weight::from_parts(0, 3807))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	fn start_evaluation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `740`
		//  Estimated: `3967`
		// Minimum execution time: 131_330_000 picoseconds.
		Weight::from_parts(132_870_000, 0)
			.saturating_add(Weight::from_parts(0, 3967))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextEvaluationId` (r:1 w:1)
	/// Proof: `Funding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Funding::EvaluationCounts` (r:1 w:1)
	/// Proof: `Funding::EvaluationCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:16 w:1)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 15]`.
	fn evaluate(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1286 + x * (194 ±0)`
		//  Estimated: `4614 + x * (2729 ±0)`
		// Minimum execution time: 177_520_000 picoseconds.
		Weight::from_parts(185_626_259, 0)
			.saturating_add(Weight::from_parts(0, 4614))
			// Standard Error: 23_552
			.saturating_add(Weight::from_parts(3_818_391, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(Weight::from_parts(0, 2729).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	fn end_evaluation_failure() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `477`
		//  Estimated: `3807`
		// Minimum execution time: 11_730_000 picoseconds.
		Weight::from_parts(12_120_000, 0)
			.saturating_add(Weight::from_parts(0, 3807))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:1 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::BidCounts` (r:1 w:1)
	/// Proof: `Funding::BidCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Bids` (r:7 w:10)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(273), added: 2748, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextBidId` (r:1 w:1)
	/// Proof: `Funding::NextBidId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::AuctionBoughtUSD` (r:1 w:1)
	/// Proof: `Funding::AuctionBoughtUSD` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Metadata` (r:1 w:0)
	/// Proof: `ForeignAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 6]`.
	/// The range of component `y` is `[0, 10]`.
	fn bid(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2870 + x * (192 ±0)`
		//  Estimated: `6208 + x * (2748 ±0)`
		// Minimum execution time: 279_151_000 picoseconds.
		Weight::from_parts(210_482_072, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			// Standard Error: 257_367
			.saturating_add(Weight::from_parts(4_106_421, 0).saturating_mul(x.into()))
			// Standard Error: 161_370
			.saturating_add(Weight::from_parts(69_928_066, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(16))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(8))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2748).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:1 w:0)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Bids` (r:34 w:33)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(273), added: 2748, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:15 w:15)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[10, 25]`.
	/// The range of component `y` is `[0, 8]`.
	fn end_auction(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1112 + x * (212 ±0) + y * (192 ±0)`
		//  Estimated: `3967 + x * (2748 ±13) + y * (2748 ±0)`
		// Minimum execution time: 185_100_000 picoseconds.
		Weight::from_parts(30_697_704, 0)
			.saturating_add(Weight::from_parts(0, 3967))
			// Standard Error: 13_868
			.saturating_add(Weight::from_parts(9_881_070, 0).saturating_mul(x.into()))
			// Standard Error: 25_108
			.saturating_add(Weight::from_parts(7_740_529, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2748).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2748).saturating_mul(y.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:1 w:0)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Contributions` (r:16 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(256), added: 2731, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ContributionBoughtUSD` (r:1 w:1)
	/// Proof: `Funding::ContributionBoughtUSD` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Metadata` (r:1 w:0)
	/// Proof: `ForeignAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextContributionId` (r:1 w:1)
	/// Proof: `Funding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 15]`.
	fn contribute(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3010 + x * (196 ±0)`
		//  Estimated: `6208 + x * (2731 ±0)`
		// Minimum execution time: 248_781_000 picoseconds.
		Weight::from_parts(258_000_840, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			// Standard Error: 36_160
			.saturating_add(Weight::from_parts(3_853_017, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(8))
			.saturating_add(Weight::from_parts(0, 2731).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	fn end_funding_project_successful() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `964`
		//  Estimated: `3967`
		// Minimum execution time: 23_480_000 picoseconds.
		Weight::from_parts(24_520_000, 0)
			.saturating_add(Weight::from_parts(0, 3967))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Metadata` (r:1 w:1)
	/// Proof: `ContributionTokens::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn start_settlement() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1029`
		//  Estimated: `3967`
		// Minimum execution time: 68_330_000 picoseconds.
		Weight::from_parts(70_330_000, 0)
			.saturating_add(Weight::from_parts(0, 3967))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Funding::Evaluations` (r:1 w:1)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(30366), added: 32841, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UnmigratedCounter` (r:1 w:1)
	/// Proof: `Funding::UnmigratedCounter` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	fn settle_rewarded_evaluation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2053`
		//  Estimated: `33831`
		// Minimum execution time: 86_840_000 picoseconds.
		Weight::from_parts(88_781_000, 0)
			.saturating_add(Weight::from_parts(0, 33831))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Funding::Bids` (r:1 w:1)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(273), added: 2748, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Metadata` (r:1 w:0)
	/// Proof: `ForeignAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:3 w:3)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(30366), added: 32841, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UnmigratedCounter` (r:1 w:1)
	/// Proof: `Funding::UnmigratedCounter` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn settle_accepted_bid_with_refund() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3107`
		//  Estimated: `33831`
		// Minimum execution time: 165_521_000 picoseconds.
		Weight::from_parts(168_670_000, 0)
			.saturating_add(Weight::from_parts(0, 33831))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().writes(12))
	}
	/// Storage: `Funding::Contributions` (r:1 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(256), added: 2731, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(30366), added: 32841, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UnmigratedCounter` (r:1 w:1)
	/// Proof: `Funding::UnmigratedCounter` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	fn settle_contribution_project_successful() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2511`
		//  Estimated: `33831`
		// Minimum execution time: 103_250_000 picoseconds.
		Weight::from_parts(104_990_000, 0)
			.saturating_add(Weight::from_parts(0, 33831))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Bids` (r:1 w:0)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(273), added: 2748, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Contributions` (r:1 w:0)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(256), added: 2731, mode: `MaxEncodedLen`)
	fn mark_project_as_settled() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `745`
		//  Estimated: `3807`
		// Minimum execution time: 27_560_000 picoseconds.
		Weight::from_parts(28_770_000, 0)
			.saturating_add(Weight::from_parts(0, 3807))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	fn start_offchain_migration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `760`
		//  Estimated: `3807`
		// Minimum execution time: 136_720_000 picoseconds.
		Weight::from_parts(137_630_000, 0)
			.saturating_add(Weight::from_parts(0, 3807))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(30366), added: 32841, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UnmigratedCounter` (r:1 w:1)
	/// Proof: `Funding::UnmigratedCounter` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 48]`.
	fn confirm_offchain_migration(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1127 + x * (65 ±0)`
		//  Estimated: `33831`
		// Minimum execution time: 26_810_000 picoseconds.
		Weight::from_parts(27_289_697, 0)
			.saturating_add(Weight::from_parts(0, 33831))
			// Standard Error: 1_829
			.saturating_add(Weight::from_parts(610_427, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	fn start_pallet_migration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `760`
		//  Estimated: `3807`
		// Minimum execution time: 139_890_000 picoseconds.
		Weight::from_parts(141_370_000, 0)
			.saturating_add(Weight::from_parts(0, 3807))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `PolkadotXcm::QueryCounter` (r:1 w:1)
	/// Proof: `PolkadotXcm::QueryCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:0)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `PolkadotXcm::Queries` (r:0 w:2)
	/// Proof: `PolkadotXcm::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn start_pallet_migration_readiness_check() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1061`
		//  Estimated: `3807`
		// Minimum execution time: 161_350_000 picoseconds.
		Weight::from_parts(163_350_000, 0)
			.saturating_add(Weight::from_parts(0, 3807))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Funding::ProjectsDetails` (r:2 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	fn pallet_migration_readiness_response_holding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1072`
		//  Estimated: `6624`
		// Minimum execution time: 23_260_000 picoseconds.
		Weight::from_parts(24_190_000, 0)
			.saturating_add(Weight::from_parts(0, 6624))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Funding::ProjectsDetails` (r:2 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	fn pallet_migration_readiness_response_pallet_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1072`
		//  Estimated: `6624`
		// Minimum execution time: 23_420_000 picoseconds.
		Weight::from_parts(24_190_000, 0)
			.saturating_add(Weight::from_parts(0, 6624))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Bids` (r:1 w:0)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(273), added: 2748, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Contributions` (r:1 w:0)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(256), added: 2731, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(30366), added: 32841, mode: `MaxEncodedLen`)
	/// Storage: `PolkadotXcm::QueryCounter` (r:1 w:1)
	/// Proof: `PolkadotXcm::QueryCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::ActiveMigrationQueue` (r:0 w:1)
	/// Proof: `Funding::ActiveMigrationQueue` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `PolkadotXcm::Queries` (r:0 w:1)
	/// Proof: `PolkadotXcm::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 48]`.
	fn send_pallet_migration_for(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1170 + x * (65 ±0)`
		//  Estimated: `33831 + x * (65 ±0)`
		// Minimum execution time: 52_920_000 picoseconds.
		Weight::from_parts(53_884_173, 0)
			.saturating_add(Weight::from_parts(0, 33831))
			// Standard Error: 3_045
			.saturating_add(Weight::from_parts(1_267_213, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(Weight::from_parts(0, 65).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ActiveMigrationQueue` (r:1 w:1)
	/// Proof: `Funding::ActiveMigrationQueue` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(30366), added: 32841, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UnmigratedCounter` (r:1 w:1)
	/// Proof: `Funding::UnmigratedCounter` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 48]`.
	fn confirm_pallet_migrations(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1249 + x * (65 ±0)`
		//  Estimated: `33831`
		// Minimum execution time: 32_670_000 picoseconds.
		Weight::from_parts(33_416_454, 0)
			.saturating_add(Weight::from_parts(0, 33831))
			// Standard Error: 2_205
			.saturating_add(Weight::from_parts(633_305, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Funding::ProjectsDetails` (r:2 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	fn do_handle_channel_open_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `725`
		//  Estimated: `6624`
		// Minimum execution time: 17_560_000 picoseconds.
		Weight::from_parts(18_170_000, 0)
			.saturating_add(Weight::from_parts(0, 6624))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Funding::ProjectsDetails` (r:2 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `PolkadotXcm::QueryCounter` (r:1 w:1)
	/// Proof: `PolkadotXcm::QueryCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:0)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `PolkadotXcm::Queries` (r:0 w:2)
	/// Proof: `PolkadotXcm::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn do_handle_channel_accepted() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1001`
		//  Estimated: `6624`
		// Minimum execution time: 40_800_000 picoseconds.
		Weight::from_parts(42_370_000, 0)
			.saturating_add(Weight::from_parts(0, 6624))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(342), added: 2817, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UnmigratedCounter` (r:1 w:0)
	/// Proof: `Funding::UnmigratedCounter` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	fn mark_project_ct_migration_as_finished() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `730`
		//  Estimated: `3807`
		// Minimum execution time: 18_601_000 picoseconds.
		Weight::from_parts(19_480_000, 0)
			.saturating_add(Weight::from_parts(0, 3807))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
