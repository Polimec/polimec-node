
//! Autogenerated weights for `pallet_funding`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-05-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-23-147`, CPU: `AMD EPYC 9R14`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("polimec-local")`, DB CACHE: 1024

// Executed Command:
// ./target/production/polimec-node
// benchmark
// pallet
// --chain=polimec-local
// --steps=50
// --repeat=20
// --pallet=pallet-funding
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=runtimes/polimec/src/weights/pallet_funding.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_funding`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_funding::WeightInfo for WeightInfo<T> {
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextProjectId` (r:1 w:1)
	/// Proof: `Funding::NextProjectId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:1 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:0 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:0 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	fn create_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `254`
		//  Estimated: `3593`
		// Minimum execution time: 162_200_000 picoseconds.
		Weight::from_parts(165_180_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:0 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	fn remove_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `464`
		//  Estimated: `3845`
		// Minimum execution time: 128_460_000 picoseconds.
		Weight::from_parts(129_390_000, 0)
			.saturating_add(Weight::from_parts(0, 3845))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:0 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:0 w:1)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	fn edit_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `464`
		//  Estimated: `3845`
		// Minimum execution time: 131_511_000 picoseconds.
		Weight::from_parts(132_990_000, 0)
			.saturating_add(Weight::from_parts(0, 3845))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_evaluation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787 + x * (28 ±0)`
		//  Estimated: `3967 + x * (2501 ±0)`
		// Minimum execution time: 133_920_000 picoseconds.
		Weight::from_parts(134_815_525, 0)
			.saturating_add(Weight::from_parts(0, 3967))
			// Standard Error: 3_610
			.saturating_add(Weight::from_parts(2_097_249, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_auction_manually(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `580 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 133_650_000 picoseconds.
		Weight::from_parts(133_981_983, 0)
			.saturating_add(Weight::from_parts(0, 3845))
			// Standard Error: 3_948
			.saturating_add(Weight::from_parts(2_066_773, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextEvaluationId` (r:1 w:1)
	/// Proof: `Funding::NextEvaluationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Funding::EvaluationCounts` (r:1 w:1)
	/// Proof: `Funding::EvaluationCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:16 w:1)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 15]`.
	fn evaluation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1330 + x * (194 ±0)`
		//  Estimated: `4614 + x * (2729 ±0)`
		// Minimum execution time: 178_720_000 picoseconds.
		Weight::from_parts(183_337_088, 0)
			.saturating_add(Weight::from_parts(0, 4614))
			// Standard Error: 14_165
			.saturating_add(Weight::from_parts(3_922_763, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(Weight::from_parts(0, 2729).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Buckets` (r:1 w:1)
	/// Proof: `Funding::Buckets` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Funding::BidCounts` (r:1 w:1)
	/// Proof: `Funding::BidCounts` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Bids` (r:7 w:10)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextBidId` (r:1 w:1)
	/// Proof: `Funding::NextBidId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::AuctionBoughtUSD` (r:1 w:1)
	/// Proof: `Funding::AuctionBoughtUSD` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Metadata` (r:1 w:0)
	/// Proof: `ForeignAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 6]`.
	/// The range of component `y` is `[0, 10]`.
	fn bid(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2946 + x * (224 ±0)`
		//  Estimated: `6208 + x * (2781 ±0)`
		// Minimum execution time: 285_270_000 picoseconds.
		Weight::from_parts(221_092_682, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			// Standard Error: 259_493
			.saturating_add(Weight::from_parts(3_492_722, 0).saturating_mul(x.into()))
			// Standard Error: 162_703
			.saturating_add(Weight::from_parts(72_249_510, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(16))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(8))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2781).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:1 w:0)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Contributions` (r:16 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(252), added: 2727, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ContributionBoughtUSD` (r:1 w:1)
	/// Proof: `Funding::ContributionBoughtUSD` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Metadata` (r:1 w:0)
	/// Proof: `ForeignAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Funding::RetailParticipations` (r:1 w:1)
	/// Proof: `Funding::RetailParticipations` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextContributionId` (r:1 w:1)
	/// Proof: `Funding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 15]`.
	fn contribution(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3170 + x * (192 ±0)`
		//  Estimated: `6208 + x * (2727 ±0)`
		// Minimum execution time: 254_230_000 picoseconds.
		Weight::from_parts(267_069_758, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			// Standard Error: 33_035
			.saturating_add(Weight::from_parts(4_090_251, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(16))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(9))
			.saturating_add(Weight::from_parts(0, 2727).saturating_mul(x.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:1 w:0)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Contributions` (r:16 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(252), added: 2727, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ContributionBoughtUSD` (r:1 w:1)
	/// Proof: `Funding::ContributionBoughtUSD` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Metadata` (r:1 w:0)
	/// Proof: `ForeignAssets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Funding::RetailParticipations` (r:1 w:1)
	/// Proof: `Funding::RetailParticipations` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `Funding::NextContributionId` (r:1 w:1)
	/// Proof: `Funding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 15]`.
	/// The range of component `y` is `[1, 99]`.
	fn contribution_ends_round(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3249 + x * (192 ±0) + y * (28 ±0)`
		//  Estimated: `6208 + x * (2727 ±0) + y * (2501 ±0)`
		// Minimum execution time: 331_510_000 picoseconds.
		Weight::from_parts(262_425_631, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			// Standard Error: 30_072
			.saturating_add(Weight::from_parts(4_738_759, 0).saturating_mul(x.into()))
			// Standard Error: 4_787
			.saturating_add(Weight::from_parts(2_302_443, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(10))
			.saturating_add(Weight::from_parts(0, 2727).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(y.into()))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn decide_project_outcome(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `833 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 141_030_000 picoseconds.
		Weight::from_parts(143_687_514, 0)
			.saturating_add(Weight::from_parts(0, 3845))
			// Standard Error: 4_071
			.saturating_add(Weight::from_parts(2_084_050, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::Evaluations` (r:1 w:1)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(3006), added: 5481, mode: `MaxEncodedLen`)
	fn settle_successful_evaluation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2122`
		//  Estimated: `6471`
		// Minimum execution time: 84_370_000 picoseconds.
		Weight::from_parts(85_540_000, 0)
			.saturating_add(Weight::from_parts(0, 6471))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Funding::Evaluations` (r:1 w:1)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn settle_failed_evaluation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1761`
		//  Estimated: `4614`
		// Minimum execution time: 77_060_000 picoseconds.
		Weight::from_parts(78_660_000, 0)
			.saturating_add(Weight::from_parts(0, 4614))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Funding::Bids` (r:1 w:1)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `LinearRelease::Vesting` (r:1 w:1)
	/// Proof: `LinearRelease::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(3006), added: 5481, mode: `MaxEncodedLen`)
	fn settle_successful_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2583`
		//  Estimated: `6471`
		// Minimum execution time: 102_260_000 picoseconds.
		Weight::from_parts(103_210_000, 0)
			.saturating_add(Weight::from_parts(0, 6471))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: `Funding::Bids` (r:1 w:1)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn settle_failed_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2300`
		//  Estimated: `6208`
		// Minimum execution time: 87_480_000 picoseconds.
		Weight::from_parts(88_660_000, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Funding::Contributions` (r:1 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(252), added: 2727, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Funding::UserMigrations` (r:1 w:1)
	/// Proof: `Funding::UserMigrations` (`max_values`: None, `max_size`: Some(3006), added: 5481, mode: `MaxEncodedLen`)
	fn settle_successful_contribution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3184`
		//  Estimated: `6471`
		// Minimum execution time: 124_400_000 picoseconds.
		Weight::from_parts(126_651_000, 0)
			.saturating_add(Weight::from_parts(0, 6471))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: `Funding::Contributions` (r:1 w:1)
	/// Proof: `Funding::Contributions` (`max_values`: None, `max_size`: Some(252), added: 2727, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsDetails` (r:1 w:0)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:2 w:2)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	fn settle_failed_contribution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2288`
		//  Estimated: `6208`
		// Minimum execution time: 88_621_000 picoseconds.
		Weight::from_parts(90_470_000, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:99 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_evaluation_success(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `556 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 14_580_000 picoseconds.
		Weight::from_parts(13_891_467, 0)
			.saturating_add(Weight::from_parts(0, 3845))
			// Standard Error: 2_073
			.saturating_add(Weight::from_parts(2_044_309, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	fn end_evaluation_failure() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `533`
		//  Estimated: `3845`
		// Minimum execution time: 11_610_000 picoseconds.
		Weight::from_parts(12_060_000, 0)
			.saturating_add(Weight::from_parts(0, 3845))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_auction_closing_phase(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `598 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 17_460_000 picoseconds.
		Weight::from_parts(16_429_614, 0)
			.saturating_add(Weight::from_parts(0, 3845))
			// Standard Error: 2_609
			.saturating_add(Weight::from_parts(2_119_429, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Nonce` (r:1 w:1)
	/// Proof: `Funding::Nonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Bids` (r:1025 w:1024)
	/// Proof: `Funding::Bids` (`max_values`: None, `max_size`: Some(306), added: 2781, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:1 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithWinningBids` (r:512 w:512)
	/// Proof: `Funding::DidWithWinningBids` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Asset` (r:1 w:1)
	/// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::Account` (r:513 w:513)
	/// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:512 w:512)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:512 w:512)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[0, 512]`.
	/// The range of component `z` is `[0, 512]`.
	fn start_community_funding(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `47605 + x * (28 ±0) + y * (225 ±0) + z * (402 ±0)`
		//  Estimated: `4079 + x * (2501 ±0) + y * (2781 ±0) + z * (3624 ±0)`
		// Minimum execution time: 5_837_206_000 picoseconds.
		Weight::from_parts(413_733_742, 0)
			.saturating_add(Weight::from_parts(0, 4079))
			// Standard Error: 106_293
			.saturating_add(Weight::from_parts(1_606_761, 0).saturating_mul(x.into()))
			// Standard Error: 20_321
			.saturating_add(Weight::from_parts(10_286_608, 0).saturating_mul(y.into()))
			// Standard Error: 20_321
			.saturating_add(Weight::from_parts(62_570_835, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(z.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(z.into())))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2781).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 3624).saturating_mul(z.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_remainder_funding(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `703 + x * (28 ±0)`
		//  Estimated: `3845 + x * (2501 ±0)`
		// Minimum execution time: 18_720_000 picoseconds.
		Weight::from_parts(17_800_359, 0)
			.saturating_add(Weight::from_parts(0, 3845))
			// Standard Error: 2_758
			.saturating_add(Weight::from_parts(2_119_148, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_automatically_rejected_evaluators_slashed(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1113 + x * (29 ±0)`
		//  Estimated: `3967 + x * (2501 ±0)`
		// Minimum execution time: 27_310_000 picoseconds.
		Weight::from_parts(26_005_918, 0)
			.saturating_add(Weight::from_parts(0, 3967))
			// Standard Error: 2_362
			.saturating_add(Weight::from_parts(2_204_431, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_awaiting_decision_evaluators_slashed(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1118 + x * (28 ±0)`
		//  Estimated: `3967 + x * (2501 ±0)`
		// Minimum execution time: 23_940_000 picoseconds.
		Weight::from_parts(24_691_041, 0)
			.saturating_add(Weight::from_parts(0, 3967))
			// Standard Error: 3_066
			.saturating_add(Weight::from_parts(2_054_312, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn end_funding_awaiting_decision_evaluators_unchanged(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1118 + x * (28 ±0)`
		//  Estimated: `3967 + x * (2501 ±0)`
		// Minimum execution time: 23_750_000 picoseconds.
		Weight::from_parts(24_609_473, 0)
			.saturating_add(Weight::from_parts(0, 3967))
			// Standard Error: 2_797
			.saturating_add(Weight::from_parts(2_058_465, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `Funding::Evaluations` (r:1024 w:0)
	/// Proof: `Funding::Evaluations` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Funding::DidWithActiveProjects` (r:0 w:1)
	/// Proof: `Funding::DidWithActiveProjects` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 1024]`.
	fn end_funding_automatically_accepted_evaluators_rewarded(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1085 + x * (28 ±0) + y * (243 ±0)`
		//  Estimated: `3967 + x * (2501 ±0) + y * (2729 ±0)`
		// Minimum execution time: 251_050_000 picoseconds.
		Weight::from_parts(253_700_000, 0)
			.saturating_add(Weight::from_parts(0, 3967))
			// Standard Error: 37_322
			.saturating_add(Weight::from_parts(527_748, 0).saturating_mul(x.into()))
			// Standard Error: 3_613
			.saturating_add(Weight::from_parts(4_280_063, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2729).saturating_mul(y.into()))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsToUpdate` (r:1 w:1)
	/// Proof: `Funding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	fn project_decision() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `781`
		//  Estimated: `3845`
		// Minimum execution time: 18_620_000 picoseconds.
		Weight::from_parts(19_310_000, 0)
			.saturating_add(Weight::from_parts(0, 3845))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Asset` (r:1 w:1)
	/// Proof: `ContributionTokens::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Metadata` (r:1 w:1)
	/// Proof: `ContributionTokens::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `ContributionTokens::Account` (r:1 w:1)
	/// Proof: `ContributionTokens::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn start_settlement_funding_success() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1095`
		//  Estimated: `3967`
		// Minimum execution time: 62_120_000 picoseconds.
		Weight::from_parts(63_550_000, 0)
			.saturating_add(Weight::from_parts(0, 3967))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Funding::ProjectsDetails` (r:1 w:1)
	/// Proof: `Funding::ProjectsDetails` (`max_values`: None, `max_size`: Some(380), added: 2855, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `Funding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(502), added: 2977, mode: `MaxEncodedLen`)
	fn start_settlement_funding_failure() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1027`
		//  Estimated: `3967`
		// Minimum execution time: 14_370_000 picoseconds.
		Weight::from_parts(14_960_000, 0)
			.saturating_add(Weight::from_parts(0, 3967))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
