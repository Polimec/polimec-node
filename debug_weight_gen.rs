
//! Autogenerated weights for `pallet_funding`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-22, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Juans-MBP.home`, CPU: `<UNKNOWN>`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("polimec-rococo-local")`, DB CACHE: 1024

// Executed Command:
// target/debug/polimec-parachain-node
// benchmark
// pallet
// --chain=polimec-rococo-local
// --steps=20
// --repeat=10
// --pallet=pallet_funding
// --extrinsic=start_evaluation,start_auction_manually,start_auction_automatically
// --output
// ./debug_weight_gen.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_funding`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_funding::WeightInfo for WeightInfo<T> {
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_evaluation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563 + x * (529 ±0)`
		//  Estimated: `4087 + x * (3097 ±0)`
		// Minimum execution time: 298_000_000 picoseconds.
		Weight::from_parts(267_225_295, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			// Standard Error: 72_655
			.saturating_add(Weight::from_parts(36_324_750, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:4554 w:2)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	/// The range of component `y` is `[1, 10000]`.
	fn start_auction_manually(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (811 ±0) + y * (30 ±0)`
		//  Estimated: `316884 + x * (17288 ±8_684) + y * (1305 ±85)`
		// Minimum execution time: 5_603_000_000 picoseconds.
		Weight::from_parts(5_897_000_000, 0)
			.saturating_add(Weight::from_parts(0, 316884))
			// Standard Error: 195_897_326
			.saturating_add(Weight::from_parts(383_791_795, 0).saturating_mul(x.into()))
			// Standard Error: 1_938_243
			.saturating_add(Weight::from_parts(29_385_710, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(103))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 17288).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 1305).saturating_mul(y.into()))
	}
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:100 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 99]`.
	fn start_auction_automatically(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `412 + x * (529 ±0)`
		//  Estimated: `4087 + x * (3097 ±0)`
		// Minimum execution time: 254_000_000 picoseconds.
		Weight::from_parts(257_107_151, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			// Standard Error: 129_758
			.saturating_add(Weight::from_parts(34_258_180, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 3097).saturating_mul(x.into()))
	}
}
