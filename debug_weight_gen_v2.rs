
//! Autogenerated weights for `pallet_funding`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-26, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Juans-MBP.home`, CPU: `<UNKNOWN>`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("polimec-rococo-local")`, DB CACHE: 1024

// Executed Command:
// target/debug/polimec-parachain-node
// benchmark
// pallet
// --chain=polimec-rococo-local
// --steps=20
// --repeat=10
// --pallet=pallet_funding
// --extrinsic=first_contribution, first_contribution_ends_round, second_to_limit_contribution, second_to_limit_contribution_ends_round, contribution_over_limit
// --output
// ./debug_weight_gen_v2.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_funding`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_funding::WeightInfo for WeightInfo<T> {
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn first_contribution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1996`
		//  Estimated: `6208`
		// Minimum execution time: 2_100_000_000 picoseconds.
		Weight::from_parts(2_210_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:1 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:9832 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `y` is `[1, 99]`.
	/// The range of component `z` is `[1, 10000]`.
	fn first_contribution_ends_round(y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + y * (909 ±0) + z * (41 ±0)`
		//  Estimated: `248750 + y * (17540 ±9_815) + z * (1383 ±97)`
		// Minimum execution time: 7_079_000_000 picoseconds.
		Weight::from_parts(7_117_000_000, 0)
			.saturating_add(Weight::from_parts(0, 248750))
			// Standard Error: 226_579_186
			.saturating_add(Weight::from_parts(362_478_839, 0).saturating_mul(y.into()))
			// Standard Error: 2_241_815
			.saturating_add(Weight::from_parts(32_034_853, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(91))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(8))
			.saturating_add(Weight::from_parts(0, 17540).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 1383).saturating_mul(z.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:255 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 255]`.
	fn second_to_limit_contribution(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2209 + x * (137 ±0)`
		//  Estimated: `6208 + x * (2839 ±0)`
		// Minimum execution time: 1_737_000_000 picoseconds.
		Weight::from_parts(1_514_705_638, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			// Standard Error: 177_615
			.saturating_add(Weight::from_parts(64_011_655, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 2839).saturating_mul(x.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:256 w:1)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsToUpdate` (r:9832 w:1)
	/// Proof: `PolimecFunding::ProjectsToUpdate` (`max_values`: None, `max_size`: Some(622), added: 3097, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 255]`.
	/// The range of component `y` is `[1, 99]`.
	/// The range of component `z` is `[1, 10000]`.
	fn second_to_limit_contribution_ends_round(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37040 + x * (137 ±0) + y * (909 ±0) + z * (41 ±0)`
		//  Estimated: `2178320 + x * (2839 ±0) + y * (103665 ±16_527) + z * (2230 ±162)`
		// Minimum execution time: 22_009_000_000 picoseconds.
		Weight::from_parts(46_609_465_170, 0)
			.saturating_add(Weight::from_parts(0, 2178320))
			// Standard Error: 379_495_438
			.saturating_add(Weight::from_parts(2_369_315_873, 0).saturating_mul(y.into()))
			// Standard Error: 3_737_964
			.saturating_add(Weight::from_parts(51_569_812, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(714))
			.saturating_add(T::DbWeight::get().reads((33_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(z.into())))
			.saturating_add(T::DbWeight::get().writes(8))
			.saturating_add(Weight::from_parts(0, 2839).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 103665).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 2230).saturating_mul(z.into()))
	}
	/// Storage: `PolimecFunding::ProjectsMetadata` (r:1 w:0)
	/// Proof: `PolimecFunding::ProjectsMetadata` (`max_values`: None, `max_size`: Some(334), added: 2809, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::ProjectsDetails` (r:1 w:1)
	/// Proof: `PolimecFunding::ProjectsDetails` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Contributions` (r:257 w:2)
	/// Proof: `PolimecFunding::Contributions` (`max_values`: None, `max_size`: Some(364), added: 2839, mode: `MaxEncodedLen`)
	/// Storage: `Oracle::Values` (r:2 w:0)
	/// Proof: `Oracle::Values` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::NextContributionId` (r:1 w:1)
	/// Proof: `PolimecFunding::NextContributionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(1149), added: 3624, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Asset` (r:1 w:1)
	/// Proof: `StatemintAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `StatemintAssets::Account` (r:2 w:2)
	/// Proof: `StatemintAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PolimecFunding::Evaluations` (r:1 w:0)
	/// Proof: `PolimecFunding::Evaluations` (`max_values`: None, `max_size`: Some(345), added: 2820, mode: `MaxEncodedLen`)
	fn contribution_over_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37440`
		//  Estimated: `730613`
		// Minimum execution time: 17_812_000_000 picoseconds.
		Weight::from_parts(18_304_000_000, 0)
			.saturating_add(Weight::from_parts(0, 730613))
			.saturating_add(T::DbWeight::get().reads(267))
			.saturating_add(T::DbWeight::get().writes(8))
	}
}
